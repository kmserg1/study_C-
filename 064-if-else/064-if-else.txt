Урок No64. Операторы условного ветвления if/else

На этом урокемы рассмотрим операторы условного ветвления if/else, а также то, как их можно использовать.

Оглавление:
1. Условные ветвления if/else
2. Использование нескольких операций в ветвлениях if/else
3. Неявное указание блоков
4. Связывание стейтментов if
5. Вложенные ветвления if/else
6. Использование логических операторов в ветвлениях if/else
7. Основные использования ветвлений if/else
8. Нулевые стейтменты


Условные ветвления if/else

Самыми простыми условными ветвлениями в языке С++ являются стейтменты if/else. Они выглядят следующим образом:

if (выражение)
стейтмент1

Либо так:

if (выражение)
стейтмент1
else
стейтмент2

выражение называется условием (или «условным выражением»). Если результатом выражения является true (любое
ненулевое значение), то выполняться будет стейтмент1. Если же результатом выражения является false (0),то
выполнятьсябудет стейтмент2 . Например:

1 #include <iostream>
2
3 int main()
4 {
5 std::cout << "Enter a number: ";
6 int a;
7 std::cin >> a;
8
9 if (a > 15)
10 std::cout << a << " is greater than 15\n";
11 else
12 std::cout << a << " is not greater than 15\n";
13
14 return 0;
15 }


Использование нескольких операций в ветвлениях if/else

Оператор if выполняет только одну операцию, если выражение является true, и также только однуо перацию else, если
выражение — false. Чтобы выполнить несколько операций подряд, используйте блок стейтментов:

1 #include <iostream>
2
3 int main()
4 {
5 std::cout << "Enter a number: ";
6 int a;
7 std::cin >> a;
8
9 if (a > 15)
10 {
11 // Обе операции будут выполнены, если a > 15
12 std::cout << "You entered " << a << "\n";
13 std::cout << a << " is greater than 15\n";
14 }
15 else
16 {
17 // Обе операции будут выполнены, если a <= 15
18 std::cout << "You entered " << a << "\n";
19 std::cout << a << " is not greater than 15\n";
20 }
21
22 return 0;
23 }


Неявное указание блоков

Если программист не указал скобки для блока стейтментов if или else, то компилятор неявно сделает это за него. Таким
образом, следующее:

if (выражение)
стейтмент1
else
стейтмент2

Будет выполняться как:

if (выражение)
{
стейтмент1
}
else
{
стейтмент2
}

По сути,это не имеет значения. Однако начинающие программисты иногда пытаются сделать что-то вроде следующего:

1 #include <iostream>
2
3 int main()
4 {
5 if (1)
6 int a = 4;
7 else
8 int a = 5;
9
10 std::cout << a;
11
12 return 0;
13 }

Программа не скомпилируется, и в итоге мы получим ошибку, что идентификатор a не определен. А произойдет это из-за
того, что программа будет выполняться следующим образом:
1 #include <iostream>
2
3 int main()
4 {
5 if (1)
6 {
7 int a = 4;
8 } // переменная a уничтожается здесь
9 else
10 {
11 int a = 5;
12 } // переменная a уничтожается здесь
13
14 std::cout << a; // переменная a здесь не определена
15
16 return 0;
17 }

В этом контексте становится понятным, что переменная a имеет локальную область видимости и уничтожается в конце
блока, в котором выполняется её инициализация. И, когда мы дойдем до строчки с std::cout, переменная a уже перестанет
существовать.


Связывание стейтментов if

Стейтменты if/else можно использовать в связке:

1 #include <iostream>
2
3 int main()
4 {
5 std::cout << "Enter a number: ";
6 int a;
7 std::cin >> a;
8
9 if (a > 15)
10 std::cout << a << " is greater than 15\n";
11 else if (a < 15)
12 std::cout << a << " is less than 15\n";
13 else
14 std::cout << a << " is exactly 15\n";
15
16 return 0;
17 }


Вложенные ветвления if/else

Одни стейтменты if могутбыть вложены в другие стейтменты if:

1 #include <iostream>
2
3 int main()
4 {
5 std::cout << "Enter a number: ";
6 int a;
7 std::cin >> a;
8
9 if (a > 15) // внешний оператор if
10	 // Это плохой способ написания вложенных стейтментов if
11 	if (a < 25) // внутренний оператор if
		12 std::cout << a << " is between 15 and 25\n";
13
14	 // К какому if относится следующий else?
15	 else
16		 std::cout << a << " is greater than or equal to 25\n";
17
18 return 0;
19 }

Обратите внимание, в программе, приведенной выше, мы можем наблюдать потенциальную ошибку двусмысленности
оператора else. К какомуifотносится операторelse:к внешнему илик внутреннему?
Дело в том, что оператор elseвсегда относитсяк последнему незакрытому оператору if в блоке, вкотором находится сам
else.Т.е.впрограмме, приведеннойвыше, elseотноситсяк внутреннему if.
9
Чтобы избежать таких вот неоднозначностей при вложенности операторов условного ветвления, рекомендуется
использовать блоки стейтментов (указывать скобки). Например, вот та же программа, приведенная выше, но уже без
двусмысленности:

1 #include <iostream>
2
3 int main()
4 {
5 std::cout << "Enter a number: ";
6 int a;
7 std::cin >> a;
8
9 if (a > 15)
10 	{
11 	if (a < 25)
12 	std::cout << a << " is between 15 and 25\n";
13 	else // относится к внутреннему оператору if
14 	std::cout << a << " is greater than or equal to 25\n";
15 	}
16
17 return 0;
18 }

Теперь понятно, что оператор else относится к внутреннему оператору if. Использование скобок также позволяет явно
указать привязку else к внешнему стейтменту if:

1 #include <iostream>
2
3 int main()
4 {
5 std::cout << "Enter a number: ";
6 int a;
7 std::cin >> a;
8
9 if (a > 15)
10 {
11 if (a < 25)
12 std::cout << a << " is between 15 and 25\n";
13 }
14 else // относится к внешнему оператору if
15 std::cout << a << " is less than 15\n";
16
17 return 0;
18 }

Используя блокистейтментов, мы уточняем, к какому if следует прикреплять определенный else. Без блоков оператор else
будет прикрепляться к ближайшему незакрытому оператору if.


Использование логических операторов в ветвлениях if/else

Также выможете проверить сразу несколько условий в ветвлениях if/else, используя логические операторы:

1 #include <iostream>
2
3 int main()
4 {
5 	std::cout << "Enter an integer: ";
6 	int a;
7 	std::cin >> a;
8 	
9 	std::cout << "Enter another integer: ";
10	int b;
11	std::cin >> b;
12	
13	if (a > 0 && b > 0) // && - это логическое И. Проверяем, являются ли оба условия истинными
14		std::cout << "Both numbers are positive\n";
15	 else if (a > 0 || b > 0) // || - это логическое ИЛИ. Проверяем, является ли истинным хоть одно из условий
16	 	std::cout << "One of the numbers is positive\n";
17	 else
18	 	std::cout << "Neither number is positive\n";
19
20	 return 0;
21 }


Основные использования ветвлений if/else

Ветвления if/else активно используются для проверки ошибок. Например,чтобы вычислить квадратный корень значения,
параметр, который передается в функциюдля вычисления, обязательно должен быть положительным:

1 #include <iostream>
2 #include <cmath> // для функции sqrt()
3
4 void printSqrt(double value)
5 {
6 	if (value >= 0.0)
7 		std::cout << "The square root of " << value << " is " << sqrt(value) << "\n";
8 	else
9 		std::cout << "Error: " << value << " is negative\n";
10 }

Также операторы if используют для ранних возвратов — когда функция возвращает управление обратно в caller еще до
завершения выполнения самой функции. В программе, приведенной ниже, если значением параметра является
отрицательное число, то функция сразу же возвращает в caller символьную константу или перечислитель в качестве
кода ошибки:

1 #include <iostream>
2
3 enum class ErrorCode
4  {
5  ERROR_SUCCESS = 0,
6  ERROR_NEGATIVE_NUMBER = -1
7  };
8
9 ErrorCode doSomething(int value)
10 {
11 // Если параметром value является отрицательное число,
12 if (value < 0)
13	// то сразу же возвращаем код ошибки
14 	return ErrorCode::ERROR_NEGATIVE_NUMBER;
15
16 // Что-нибудь делаем
17
18 return ErrorCode::ERROR_SUCCESS;
19 }
20
21 int main()
22 {
23 std::cout << "Enter a positive number: ";
24 int a;
25 std::cin >> a;
26
27 if (doSomething(a) == ErrorCode::ERROR_NEGATIVE_NUMBER)
28 	{
29 	std::cout << "You entered a negative number!\n";
30	}
31 else
32	{
33	std::cout << "It worked!\n";
34	}
35
36 return 0;
37 }

Ветвления if/else также обычно используют для выполнения простых математических операций. Например, рассмотрим
функцию min(),которая возвращает минимальное из двух чисел:

1 int min(int a, int b)
2 {
3	if (a > b)
4		return b;
5	else
6		return a;
7 }

Эта функция настолько проста, что её можно записать с помощью условного тернарного оператора:

1 int min(int a, int b)
2 {
3 	return (a > b) ? b : a;
4 }


Нулевые стейтменты

Также в C++ можно не указывать основнуючасть оператора if. Такие стейтменты называются нулевыми стейтментами
(или «null-стейтментами»). Объявить их можно, используя точку с запятойвместо выполняемой операции. В целях
улучшения читабельности кода, точка с запятой нулевого стейтмента обычно пишется с новой строки. Таким образом, мы
явно указываем, что хотим использовать null-стейтмент, уменьшая вероятность не заметить его использования:

1 if (a > 15)
2 	 ; //это нулевой стейтмент

Хотя нулевые стейтменты редко используются в сочетании с оператором if, но, из-за неосторожности, это может привести к
проблемам. Рассмотрим следующий фрагмент кода:

1 if (a == 0);
2 a = 1;

В вышеприведенном примеремы случайно указали точку с запятой в конце оператора if. Эта неосмотрительность
приведет к тому,что кодбудет выполняться следующим образом:
1 if (a == 0)
2 ; // точка с запятой указывает, что это нулевой стейтмент
3 a = 1; // и эта строка выполнится в любом случае!

Предупреждение: Всегда проверяйте, не «закрыли» ли вы случайно оператор if точкой с запятой.

