Урок No 140. Перегрузка операций преобразования типов данных

Как мы уже знаем из урока о неявном преобразовании типов данных, C++ позволяет конвертировать значения из одного
типа данных в другой. Например, преобразуем значение типа int в значение типа double:

1 int a = 7;
2 double b = a; // значение типа int неявно конвертируется в значение типа double

Язык C++ по умолчанию знает, как выполнять преобразования встроенных типов данных. Однако он не знает, как
выполнять конвертацию с пользовательскими типами данных (например, с классами). Именно здесь вступаетв игру
перегрузка операций преобразованиятипов данных. Рассмотрим следующий класс:

1 class Dollars
2 {
3 private:
4 	int m_dollars;
5 public:
6 	Dollars(int dollars=0)
7 	{
8 		m_dollars = dollars;
9 	}
10
11 	int getDollars() { return m_dollars; }
12 	void setDollars(int dollars) { m_dollars = dollars; }
13 };

Класс Dollars содержит некое количество долларов в виде целого числа (переменная-член m_dollars ) и предоставляет
функции доступа для полученияи установления значения m_dollars. В нем также есть конструктор для конвертации
значений типа int в тип Dollars (при создании объекта пользователь передает в качестве аргумента значение типа int,
которое затем преобразуется в значение типа Dollars).

Если мы можем конвертировать int в Dollars, то логично было бы, если бы мы могли конвертировать и Dollars обратно в int,
не такли? Иногда это может быть полезным.                                                           
В следующем примере мы используем метод getDollars() для конвертации значения типа Dollars в тип int для его
последующего вывода через функцию printInt():

1 void printInt(int value)
2 {
3 std::cout << value;
4 }
5
6 int main()
7 {
8 Dollars dollars(9);
9 printInt(dollars.getDollars()); // выведется 9
10
11 return 0;
12 }

Согласитесь, вызывать каждый раз метод getDollars() не очень удобно. Было бы проще перегрузить операцию
преобразования значений типа Dollars в тип int. Делается это следующим образом:

1 class Dollars
2 {
3 private:
4 	int m_dollars;
5 public:
6 	Dollars(int dollars=0)
7 	{
8 		m_dollars = dollars;
9 	}
10
11 	// Перегрузка операции преобразования значений типа Dollars в значения типа int
12 	operator int() { return m_dollars; }
13
14 	int getDollars() { return m_dollars; }
15 	void setDollars(int dollars) { m_dollars = dollars; }
16 };

Здесь есть две вещи, на которые следует обратить внимание:

 В качестве функции перегрузки используется метод operator int(). Обратите внимание, между словом operator и
типом,в который мы хотимвыполнить конвертацию (в данном случае, тип int), находится пробел.

 Функция перегрузки не имеет типа возврата. Язык C++ предполагает, что вы будете возвращать корректный тип.

Теперь функция printInt() вызывается проще:

1 int main()
2 {
3 	Dollars dollars(9);
4 	printInt(dollars); // выведется 9
5
6 	return 0;
7 }

Сначала компилятор видит, что функция printInt() должна принимать целочисленный параметр (из определенияprintInt()).
Затем он видит, что переменная dollars не является типа int. Он смотрит, предоставили ли мы способ конвертации
значения типа Dollars в тип int. Так как это у нас есть, то вызывается operator int(), который возвращает значение 
типа int, и это значение передается в printInt().

Теперь мы можем явно конвертировать объект класса Dollarsв тип int:

1 Dollars dollars(9);
2 int d = static_cast<int>(dollars);

Вы можете перегружать операции преобразования любых типов данных, включаяваши собственные (пользовательские)
типы данных!
Например,вот класс Cents, в котором осуществлена перегрузка операции преобразования значения типа Cents в значение
типа Dollars:

1 class Cents
2 {
3 private:
4 	int m_cents;
5 public:
6 Cents(int cents=0)
7 {
8 	m_cents = cents;
9 }
10
11 // Выполняем конвертацию Cents в Dollars
12 operator Dollars() { return Dollars(m_cents / 100); }
13 };

Таким образом мы можем напрямую конвертировать центы в доллары:

1 #include <iostream>
2
3 class Dollars
4 {
5 private:
6 	int m_dollars;
7 public:
8 	Dollars(int dollars = 0)
9 	{
10 		m_dollars = dollars;
11 	}
12
13 	// Перегрузка операции преобразования значения типа Dollars в значение типа
14 	operator int() { return m_dollars; }
15
16 	int getDollars() { return m_dollars; }
17 	void setDollars(int dollars) { m_dollars = dollars; }
18 };
19
20 class Cents
21 {
22 private:
23 	int m_cents;
24 public:
25 	Cents(int cents=0)
26 	{
27 		m_cents = cents;
28 	}
29
30 	// Выполняем конвертацию Cents в Dollars
31 	operator Dollars() { return Dollars(m_cents / 100); }
32 };
33
34 void printDollars(Dollars dollars)
35 {
36 	std::cout << dollars; // dollars неявно конвертируется в int здесь
37 }
38
39 int main()
40 {
41 	Cents cents(700);
42 	printDollars(cents); // cents неявно конвертируется в Dollars здесь
43
44 	return 0;
45 }

Результат выполнения программы:
7
Всё логично: 700 центов = 7 долларов!