Урок No43. Логические операторы: И, ИЛИ, НЕ


На этом уроке мы рассмотрим логические операторы И, ИЛИ и НЕ в языке С++.

Оглавление:
1. Логические операторы
2. Логический оператор НЕ
3. Логический оператор ИЛИ
4. Логический оператор И
5. Короткий цикл вычислений
6. Использование логических операторов И/ИЛИ
7. Законы Де Моргана
8. А где же побитовое исключающее ИЛИ (XOR)?
9. Тест


Логические операторы

В то время как операторы сравнения используются для проверки конкретного условия: ложное оно или истинное, они могут
проверить только одно условие за определенный промежуток времени. Но бывают ситуации, когда нужно протестировать
сразу несколько условий. Например, чтобы узнать, выиграли ли мы в лотерею, нам нужно сравнить все цифры купленного
билета с выигрышными. Если в лотерее 6 цифр, то нужно выполнить 6 сравнений, все из которых должны быть true.
Также иногда нам нужно знать, является ли хоть одно из нескольких условий истинным. Например, мы не пойдем сегодня на
работу, если больны или слишком устали, или если выиграли в лотерею. Нам нужно проверить, является ли хоть одно из
этих трех условий истинным. Как этосделать? С помощью логических операторов! Они позволяют проверить сразу несколько
условий за раз.
В языке C++ есть 3 логических оператора:
--------------------------------------------------------------------------------------------------------
Оператор	 Символ	 	Пример	 	 Операция
--------------------------------------------------------------------------------------------------------
Логическое НЕ	 !		 !x		 true, если x — false и false, если x — true
Логическое И	 &&		 x && y		 true, если x и y — true, в противном случае —false
Логическое ИЛИ	 ||		 x || y		 true, если x или y — true, в противном случае — false
--------------------------------------------------------------------------------------------------------

Логический оператор НЕ

Мы уже с ним сталкивались на уроке No 34.
Логический оператор НЕ (!)
--------------------
Операнд	 Результат	
--------------------
true	 false
false	 true
--------------------
Если операндом является true, то, после применения логического НЕ, результатом будет false. 
Еслиже операнд до применения оператора НЕ был false, то после его применения станет true. 
Другими словами, логический оператор НЕ меняетрезультат на противоположный начальному значению.
Он часто используется в условных выражениях:

1 bool bTooLarge = (x > 100); // переменная bTooLarge будет true, если x > 100
2 if (!bTooLarge)
3 	// Делаем что-нибудь с x
4 else
5 	// Выводим ошибку

Следует помнить, что логический оператор НЕ имеет очень высокий уровень приоритета. Новички часто совершают
следующую ошибку:
1 #include <iostream>
2
3 int main()
4 {
5 int x = 5;
6 int y = 7;
7
8 if (!x == y)
9 	std::cout << "x does not equal y";
10 else
11	std::cout << "x equals y";
12
13 return 0;
14 }

Результатвыполнения программы:
х equals у

Но х ведь не равно у , как это возможно?
Поскольку приоритет логическогооператора НЕ выше, чем приоритет оператора
равенства, товыражение !х == у обрабатывается как (! х) == у. Так как х — это 5,то !x — это 0 . Условие 0 == у
ложное, поэтому выполняется часть else!

Напоминание: Любое ненулевое целое значение в логическом контексте является true. Так как х = 5, то х вычисляется
как true, а вот !x = false, т.е. 0. Использование целых чисел в логических операциях подобным образом может
запутать не только пользователя, но и самого разработчика, поэтому такне рекомендуется делать!
Правильный способ написания программы, приведенной выше:
1 #include <iostream>
2
3 int main()
4 {
5 int x = 5;
6 int y = 7;
7
8 if (!(x == y))
9 	std::cout << "x does not equal y";
10 else
11 	 std::cout << "x equals y";
12
13 return 0;
14 }

Сначала обрабатывается х == у , а затем уже оператор НЕ изменяет результат на противоположный.

Правило: Если логический оператор НЕ должен работать с результатами работы других операторов, то другие
операторы и их операнды должны находиться в круглых скобках.


Логический оператор ИЛИ

Если хоть одно из двух условий является истинным, то логический оператор ИЛИ является true.
Логическийоператор ИЛИ (||)
-------------------------------------------
Левый операнд	 Правыйоперанд	 Результат
-------------------------------------------
false		 false		 false
false		 true		 true
true		 false		 true
true		 true		 true
-------------------------------------------

Рассмотрим следующую программу:
1 #include <iostream>
2
3  int main()
4  {
5  std::cout << "Enter a number: ";
6  int value;
7  std::cin >> value;
8
9  if (value == 0 || value == 1)
10	 std::cout << "You picked 0 or 1" << std::endl;
11 else
12 	std::cout << "You did not pick 0 or 1" << std::endl;
13
14 return 0;
15 }

Здесь мы использовали логический оператор ИЛИ, чтобы проверить, является ли хоть одно из двухусловий истинным: левое
( value == 0 ) или правое (value == 1). Если хоть одно из условий — true или оба сразу true, то выполняться будет стейтмент
if. Если ни одно из условий не является true, то результат —false и выполняться будет стейтмент else.
Вы можете связать сразу несколько условий:
1 if (value == 0 || value == 1 || value == 2 || value == 3)
2 std::cout << "You picked 0, 1, 2, or 3" << std::endl;

Новички иногда путают логическое ИЛИ( || ) с побитовым ИЛИ ( | ). Хоть уних и одинаковые названия, функции они
выполняют разные.


Логический оператор И

Только при условии, что оба операнда будут истинными, логический оператор И будет true. Если нет, тогда — false.
ЛогическийоператорИ(&&)
-------------------------------------------
Левый операнд	 Правый операнд	 Результат
-------------------------------------------
false		 false		 false
false		 true		 false
true		 false		 false
true		 true		 true
-------------------------------------------

Например, мы хотим узнать, находится ли значение переменной х в диапазоне от 10 до 20. Здесь унас есть два условия: мы
должны проверить, является ли х больше 10 и является ли х меньше 20.
1 #include <iostream>
2
3 int main()
4 {
5 std::cout << "Enter a number: ";
6 int value;
7 std::cin >> value ;
8
9 if (value > 10 && value < 20)
10	 std::cout << "Your value is between 10 and 20" << std::endl;
11 else
12	 std::cout << "Your value is not between 10 and 20" << std::endl;
13
14 return 0;
15 }

Если оба условия истинны, то выполняется часть if. Если же хоть одно или сразу оба условия ложные, то выполняется часть
else.
Как и с логическим ИЛИ, мы можем комбинировать сразу несколько условийИ:
1 if (value > 10 && value < 20 && value != 16)
2 	// Делаем что-нибудь
3 else
4	 // Делаем что-нибудь другое


Короткий цикл вычислений

Для того, чтобы логическое И возвращало true, оба операнда должны быть истинными. Если первый операнд вычисляется как
false, то оператор И должен сразу возвращать false независимо от результата второго операнда (даже без его обработки). Это
называется коротким циклом вычисления (англ. «short circuitevaluation») и выполняется он, в первую очередь, в целях
оптимизации.
Аналогично, если первый операнд логического ИЛИ является true, то и всё условие будет true (даже без обработки второго
операнда).
Как и в случае с оператором ИЛИ, новички иногда путают логическое И ( && ) с побитовым И (& ).


Использование логических операторов И/ИЛИ

Иногда возникают ситуации, когда смешивания логических операторов И и ИЛИ в одномвыражении не избежать. Тогда
следует знать о возможных проблемах, которые могут произойти.
Многие программисты думают, что логические И и ИЛИ имеют одинаковый приоритет (или забывают, что это не так), так же
как и сложение/вычитаниеили умножение/деление. Тем не менее, приоритет логического И вышеприоритета ИЛИ. Таким
образом, операции с оператором И всегдабудут вычисляться первыми (если только операции с ИЛИ не находятся в круглых
скобках).
Рассмотрим следующее выражение: value1 || value2 && value3 . Поскольку приоритет логического И выше, то
обрабатываться выражениебудет так:

value1 || (value2 && value3)
А не так:
(value1 || value2) && value3

Хорошей практикой является использование круглых скобок с операциями. Это предотвратит ошибки приоритета, увеличит
читабельность кода и чётко дастпонять компилятору, как следует обрабатывать выражения. Например, вместо того, чтобы
писать value1 && value2 || value3 && value4 , лучше записать (value1 && value2) || (value3 && value4) .


Законы Де Моргана

Многие программисты совершают ошибку, думая,что !(x && y) — это тоже самое, что и !x && !y . К сожалению, вы не
можете использовать логическое НЕ подобным образом.

Законы Де Моргана гласят, что !(x && y) эквивалентно !x || !y, а !(x || y) эквивалентно !x && !y.

Другими словами, логические операторы И и ИЛИ меняются местами! В некоторых случаях, это даже полезно, так как улучшает
читабельность.


А где же побитовое исключающее ИЛИ (XOR)?

Побитовое исключающее ИЛИ (XOR) — это логический оператор, который используется в некоторых языках
программирования для проверки на истинность нечётного количества условий.

Побитовое исключающее ИЛИ (XOR)
-------------------------------------------
Левый операнд	 Правый операнд	 Результат
-------------------------------------------
false		 false		 false
false		 true		 true
true		 false		 true
true		 true		 false
-------------------------------------------

В языке C++ нет такого оператора. В отличииот логических И/ИЛИ, к XOR не применяется короткий цикл вычислений. Однако
его легко можно сымитировать, используя оператор неравенства( != ):

1 if (a != b) ... // a XOR b (предполагается, что a и b имеют тип bool)

Можно также расширитьколичество операндов:

1 if (a != b != c != d) ... // a XOR b XOR c XOR d (предполагается, что a, b, c и d имеют тип bool)

Следует отметить, что вышеприведенные шаблоны XOR работают только, если операнды имеют логический (а не
целочисленный) тип данных. Если выхотите, чтобы это работало и с целыми числами, то используйте оператор static_cast.

Форма XOR, котораяработает и с другими типами данных (с помощью оператора static_cast мы можем конвертировать любой
тип данных в тип bool):
1 if (static_cast <bool>(a) != static_cast<bool>(b) != static_cast<bool>(c) != static_cast<bool>(d)) ... // a XOR b XOR c XOR d, для любого типа, который может быть конвертирован в тип bool

Тест
Какой результат следующих выражений?
 Выражение No1: (true && true) || false
true

 Выражение No2: (false && true) || true
true

 Выражение No3: (false && true) || false || true
true

 Выражение No4: (5 > 6 || 4 > 3) && (7 > 8)
false

 Выражение No5: !(7 > 6 || 3 > 4)
false

Ответ

Примечание: В ответах объяснение выполняется с помощью стрелочки (=>). Например, (true || false) => true означает, 
что результатом выражения (true || false) является true.

   Выражение №1: (true && true) || false => true || false => true

   Выражение №2: (false && true) || true => false || true => true

   Выражение №3: (false && true) || false || true => false || false || true => false || true => true

   Выражение №4: (5 > 6 || 4 > 3) && (7 > 8) => (false || true) && false => true && false => false

   Выражение №5: !(7 > 6 || 3 > 4) => !(true || false) => !true => false


