Урок No5. Компиляция вашей первой программы

Перед написанием нашей первой программы мы еще должны кое-что узнать.
Оглавление:
1. Теория
2. Пользователям VisualStudio
3. ПользователямCode::Blocks
4. Пользователямкоманднойстроки
5. Пользователям веб-компиляторов
6. Пользователямдругих IDE
7. Если компиляция прошла неудачно
8. Заключение

Теория

Во-первых, несмотря на то, что код ваших программ находится в файлах .cpp, эти файлы добавляются в проект.
Проект содержит все необходимые файлы вашей программы, а также сохраняет указанные вами настройки вашей IDE.
Каждый раз, при открытии проекта, он запускается с того момента, на котором вы остановились в прошлый раз.
При компиляции программы, проект говорит компилятору и линкеру, какие файлы нужно скомпилировать, а какие связать.
Стоит отметить, что файлы проекта одной IDE не будут работать в другой IDE. Вам придется создать новый проект (в другой IDE).

Во-вторых, есть разные типы проектов. При создании нового проекта, вам нужно будет выбрать его тип. Все проекты, которые
мы будем создавать на данных уроках, будут консольного типа. Это означает, что они запускаются в консоли (аналог
командной строки). По умолчанию, консольные приложения не имеют графического интерфейса пользователя—GUI (сокр. от
«Graphical User Interface») и компилируются в автономные исполняемые файлы. Это идеальный вариант для изучения языка
C++, так как он сводит всю сложность к минимуму.

В-третьих, при создании нового проекта большинство IDE автоматически добавят ваш проект в рабочее пространство.
Рабочее пространство — это своеобразный контейнер, который может содержать один или несколько связанных проектов.
Несмотря на то, что вы можете добавить несколько проектов в одно рабочее пространство, все же рекомендуется создавать
отдельное рабочее пространство для каждой программы. Это намного упрощает работу для новичков.
Традиционно, первой программой на новом языке программирования является всем известная программа «Hello, world!».
Мы не будем нарушать традиции.

Пользователям Visual Studio

Для созданиянового проекта в Visual Studio 2019, вам нужно сначала запустить эту IDE, затем выбрать "Файл" > "Создать" >
"Проект"
Дальше появится диалоговое окно,где вам нужно будет выбрать "Консольное приложение Windows" из вкладки "Visual
C++" и нажать"ОК"
Также вы можете указать имя проекта (любое) и его расположение (рекомендую ничего не менять) в соответствующих полях.
В текстовом редакторе вы увидите,что уже есть некоторый текст и код — удалите его,а затем напечатайте или скопируйте
следующий код:

#include <iostream>

int main()
{
  std::cout << "Hello, world!" << std::endl;
  return 0;
} 
 
ВАЖНОЕ ПРИМЕЧАНИЕ: Строка #include "pch.h" требуется только для пользователей Visual Studio2017.
Если вы используете Visual Studio 2019 (или более новую версию), то не нужно писать эту строку вообще.

Чтобы запустить программу в Visual Studio, нажмите комбинацию Ctrl+F5. Если всё хорошо, то вы увидите следующее:
...
Это означает, что компиляция прошла успешно и результат выполнения вашей программы следующий:
Hello,world!
Чтобы убрать строку «...завершает работу с кодом 0...», вам нужно перейти в "Отладка" > "Параметры":
Затем"Отладка" > "Общие" и поставить галочку возле "Автоматически закрыть консоль при остановке отладки" и
нажать "ОК":
Тогда ваше консольное окно будет выглядеть следующим образом:
...
Готово! Мы научились компилировать программу в Visual Studio.


Пользователям Code::Blocks
Чтобы создать новый проект, запустите Code::Blocks, выберите "File" > "New" >"Project":
Затем появится диалоговое окно, где вам нужно будет выбрать "Console application" и нажать "Go":
Затем выберите язык"C++" и нажмите "Next" :
Затем нужно указать имя проекта и его расположение (можете создать отдельную папку Projects) и нажать"Next" :
В следующем диалоговом окне нужно будет нажать "Finish".
После всех этих манипуляций, вы увидите пустое рабочее пространство. Вам нужно будет открыть папку Sources в левой части
экрана и дважды кликнуть по main.cpp:
Вы увидите, что программа «Hello, world!» уже написана!
Для того, чтобы скомпилировать ваш проект в Code::Blocks, нажмите Ctrl+F9, либо перейдите в меню "Build" и выберите
"Build" . Если всё пройдет хорошо, то вы увидете следующее во вкладке "Build log":
...
Это означает, что компиляция прошла успешно!
Чтобы запустить скомпилированную программу, нажмите Ctrl+F10 ,либо перейдите в меню "Build" и выберите "Run". Вы
увидите следующее окно:
...
Это результат выполнения вашей программы.


Пользователям командной строки
Вставьте следующий код в текстовый файл с именем HelloWorld.cpp:
#include <iostream>

int main()
{
std::cout << "Hello, world!" << std::endl;
return0;
}

В командной строке напишите:
g++ -o HelloWorld HelloWorld.cpp
Эта команда выполнит компиляцию и линкинг файла HelloWorld.cpp.
Для запускапрограммынапишите:
HelloWorld или ./HelloWorld
И вы увидите результат выполнения вашей программы.


Пользователям веб-компиляторов

Вставьте следующий код в рабочее пространство:

#include<iostream>
int main()
{
std::cout << "Hello,world!" << std::endl;
return0;
}

Затем нажмите "Run". Вы должны увидеть результат в окне выполнения.


Пользователям других IDE
Вам нужно:
Шаг No 1: Создать консольный проект.
Шаг No 2: Добавить .cpp-файл в проект (если нужно).
Шаг No 3: Вставить следующий код в .cpp-файл:
#include<iostream>
int main()
{
std::cout << "Hello,world!" << std::endl;
return0;
}

Шаг No 4: Скомпилировать проект.
Шаг No 5: Запустить проект.

Если компиляция прошла не удачно (a.k.a.«ОБоже,что-то пошло нетак!»)

Всё нормально, без паники. Скорее всего,это какой-то пустяк.
 Во-первых, убедитесь,что вы написали код правильно: без ошибок и опечаток. Сообщение об ошибке компилятора
может дать вамключ к пониманию того, где и какие ошибки случились.
 Во-вторых, просмотрите Урок No 7 — там есть решения наиболее распространенных проблем.
 Если всё вышесказанное не помогло — «загуглите» проблему. С вероятностью 90% кто-то уже сталкивался с этим раньше
и нашел решение.

Заключение
Поздравляем, вы написали, скомпилировали и запустили свою первую программу на языкеC++!
Небеспокойтесь, если вы не понимаете, что означает весь вышеприведенный код.
Мы детально всё это рассмотрим на следующих уроках.
