Урок No115. Инкапсуляция, Геттеры и Сеттеры


На предыдущем уроке мы узнали, что переменные-члены класса по умолчанию являются
закрытыми. Новички, которые изучают объектно-ориентированное программирование, очень
часто не понимают, почему всё обстоит именно так.

Оглавление:
1. Зачем делать переменные-члены класса закрытыми?
2. Инкапсуляция
3. Функции доступа (геттеры и сеттеры)
4. Заключение


Зачем делать переменные-члены класса закрытыми?

В качестве ответа, воспользуемся аналогией. В современной жизни мы имеем доступ ко многим
электронным устройствам. К телевизору есть пульт дистанционного управления, с помощью
которого можно включать/выключать телевизор. Управление автомобилем позволяет в разы
быстрее передвигаться между двумя точками. С помощью фотоаппарата можно делать снимки.
Все эти 3 вещи используют общий шаблон: они предоставляют вам простой интерфейс (кнопка,
руль и т.д.) для выполнения определенного действия. Однако, то, как эти устройства фактически
работают, скрыто от вас (как от пользователей). Для нажатия кнопки на пульте дистанционного
управления вам не нужно знать, что выполняется «под капотом» пульта для взаимодействия с
телевизором. Когда вы нажимаете на педаль газа в своем автомобиле, вам не нужно знатьо том,
как двигатель внутреннего сгорания приводит в движение колеса. Когда вы делаете снимок, вам
не нужно знать, как датчики собирают свет в пиксельное изображение.

Такое разделение интерфейса и реализации чрезвычайно полезно, поскольку оно позволяет
использовать объекты, без необходимости понимания их реализации. Это значительно снижает
сложность использования этих устройств и значительно увеличивает их количество (устройства с
которыми можно взаимодействовать).
По аналогичным причинам разделение реализации и интерфейса полезно и в
программировании.


Инкапсуляция

В объектно-ориентированном программировании инкапсуляция (или «сокрытие информации»)
— это процесс скрытого хранения деталей реализации объекта. Пользователи обращаются к
объекту через открытый интерфейс.
В языке C++ инкапсуляция реализована через спецификаторы доступа. Как правило, все
переменные-члены класса являются закрытыми (скрывая детали реализации), а большинство
методов являются открытыми (с открытым интерфейсом для пользователя). Хотя требование к
пользователям использовать публичный интерфейс может показаться более обременительным,
нежели просто открыть доступ к переменным-членам, но на самом деле это предоставляет
большое количество полезных преимуществ, которые улучшают возможность повторного
использования кода и его поддержку.

Преимущество No1: Инкапсулированные классы проще в использовании и уменьшают
сложность ваших программ.

С полностью инкапсулированным классом вам нужно знать только то, какие методы являются
доступными для использования, какие аргументы они принимают и какие значения возвращают.
Не нужно знать, как класс реализован изнутри. Например, класс, содержащий список имен, может
быть реализован с использованием динамического массива, строк C-style, std::array,
std::vector, std::map, std::list или любой другой структуры данных. Для использования этого
класса, вам не нужно знать детали его реализации. Это значительно снижает сложность ваших
программ, а также уменьшает количество возможных ошибок. Это является ключевым
преимуществом инкапсуляции.
Все классы Стандартной библиотеки C++ инкапсулированы. Представьте, насколько сложнее был
бы процесс изучения языка C++, если бы вам нужно было знать реализацию std::string, std::vector
или std::cout (и других объектов) для того, чтобы их использовать!

Преимущество  No2: Инкапсулированные классы помогают защитить ваши данные и
предотвращают их неправильное использование.

Глобальные переменные опасны, так как нет строгого контроля над тем, кто имеет к ним доступ
и как их используют. Классы с открытыми членами имеют ту же проблему, только в меньших
масштабах. Например, допустим, что нам нужно написать строковый класс. Мы могли бы начать
со следующего:

1 class MyString
2 {
3 char *m_string; // динамически выделяем строку
4 int m_length; // используем переменную для отслеживания длины строки
5 };

Эти два члена связаны: m_length всегда должен соответствовать длине строки, удерживаемой
m_string. Если бы m_length был открытым, то любоймог бы изменить длину строки без
изменения m_string (или наоборот). Это точно привело бы к проблемам. Делая как m_length,
так и m_string закрытыми, пользователи вынуждены использовать методы для взаимодействия
с классом.
Мы также можем сами улучшить защиту нашего класса от неправильного использования.
Например, рассмотрим класс с открытой переменной-членом в виде массива:

1 class IntArray
2 {
3 public:
4 int m_array[10];
5 };

Если бы пользователи могли напрямую обращаться к массиву, то они могли бы использовать
недопустимый индекс:

1 int main()
2 {
3 IntArray array;
4 array.m_array[16] = 2; // некорректный индекс, вследствие чего перезаписываем память, которой мы не владеем
5 }

Однако, если мы сделаем массив закрытым, то сможем заставить пользователя использовать
функцию, которая первым делом проверяет корректность индекса:

1 class IntArray
2 {
3 private:
4 int m_array[10]; // пользователь не имеет прямого доступа к этому члену
5
6 public:
7 	void setValue(int index, int value)
8 	{
9 		// Если индекс недействителен, то не делаем ничего
10 		if (index < 0 || index >= 10)
11 			return;
12
13 		m_array[index] = value;
14 	}
15 };

Таким образом, мы защитим целостность нашей программы.
Примечание: Функция at() в std::array и std::vector делает что-то похожее!

Преимущество No3: Инкапсулированные классы легче изменить.

Рассмотрим следующий простой пример:
1 #include <iostream>
2
3 class Values
4 {
5 public:
6 int m_number1;
7 int m_number2;
8 int m_number3;
9 };
10
11 int main()
12 {
13 Values value;
14 value.m_number1 = 7;
15 std::cout << value.m_number1 << '\n';
16 }

Хотя этап рограмма работает нормально, но что произойдет, если мы решим переименовать
m_number1 или изменить тип этой переменной? Мы бы сломали не только этупрограмму, но и
большую часть программ, которые используют класс Values!
Инкапсуляция предоставляет возможность изменения способа реализации классов, не нарушая
при этомработу всех программ, которые их используют. Вот инкапсулированная версия класса,
приведенного выше, но которая использует методы для доступа к m_number1 :

1 #include <iostream>
2
3 class Values
4 {
5 private:
6 int m_number1;
7 int m_number2;
8 int m_number3;
9
10 public:
11 void setNumber1(int number) { m_number1 = number; }
12 int getNumber1() { return m_number1; }
13 };
14
15 int main()
16 {
17 Values value;
18 value.setNumber1(7);
19 std::cout << value.getNumber1() << '\n';
20 }

Теперь давайте изменим реализацию класса:

1 #include <iostream>
2
3 class Values
4 {
5 private:
6 int m_number[3]; // здесь изменяем реализацию этого класса
7
8 public:
9 	// Нам нужно обновить переменные методов, чтобы заработала новая реализация
10 	void setNumber1(int number) { m_number[0] = number; }
11 	int getNumber1() { return m_number[0]; }
12 };
13
14 int main()
15 {
16 // Но наша программа продолжает работать как прежде
17 Values value;
18 value.setNumber1(7);
19 std::cout << value.getNumber1() << '\n';
20 }

Обратите внимание, поскольку мы не изменяли прототипы каких-либо функций в открытом
интерфейсе нашего класса, наша программа, использующая класс, продолжает работать без
каких-либо изменений или проблем.
Аналогично,если бы ночью гномы пробрались в ваш дом и заменили внутреннюю часть вашего
пульта от телевизора на другую (совместимую) технологию, вы, вероятно, даже не заметили бы
ничего!

Преимущество №4: С инкапсулированными классами легче проводить отладку.

И, наконец, инкапсуляция помогает проводить отладку программ, когда что-то идет не по плану. 
Часто причиной неправильной работы программы является некорректное значение одной из переменных. 
Если каждый объект имеет прямой доступ к переменной, то отследить часть кода, которая изменила 
переменную, может быть довольно-таки трудно. 
Однако, если для изменения значения нужно вызывать один и тот же метод, вы можете просто 
использовать точку останова для этого метода и посмотреть, как каждый вызывающий объект изменяет 
значение, пока не увидите что-то странное.


Функции доступа (геттеры и сеттеры)

В зависимости от класса, может быть уместным (в контексте того, что делает класс) иметь
возможность получать/устанавливать значения закрытым переменным-членам класса.
Функция доступа — это короткая открытая функция, задачей которой является получение или
изменение значения закрытой переменной-члена класса. Например:

1 class MyString
2 {
3 private:
4 	char *m_string; // динамически выделяем строку
5 	int m_length; // используем переменную для отслеживания длины строки
6
7 public:
8 	int getLength() { return m_length; } // функция доступа для получения значения m_length
9 };

Здесь getLength() является функцией доступа, которая просто возвращает значение m_length .
Функции доступа обычно бывают двух типов:
 геттеры — это функции, которые возвращают значения закрытых переменных-членов класса;
 сеттеры — это функции,которые позволяют присваивать значения закрытым переменным-членам класса.

Вот пример класса, который использует геттеры и сеттеры для всех своихзакрытых переменных-членов:

1 class Date
2 {
3 private:
4 int m_day;
5 int m_month;
6 int m_year;
7
8 public:
9 int getDay() { return m_day; } // геттер для day
10 void setDay(int day) { m_day = day; } // сеттер для day
11
12 int getMonth() { return m_month; } // геттер для month
13 void setMonth(int month) { m_month = month; } // сеттер для month
14
15 int getYear() { return m_year; } // геттер для year
16 void setYear(int year) { m_year = year; } // сеттер для year
17 };

В этом классе нет никаких проблем с тем, чтобы пользователь мог напрямую получать или
присваивать значения закрытым переменным-членам этого класса, так как есть полный набор
геттеров и сеттеров. В примере с классом MyString для переменной m_length не было
предоставлено сеттера,так как не было необходимости в том, чтобы пользователь мог напрямую
устанавливать длину.

Правило: Предоставляйте функции доступа только в том случае, когда нужно, чтобы
пользователь имел возможность получать или присваивать значения членам класса.

Хотя иногда вы можете увидеть, что геттер возвращает неконстантную ссылку на переменную-
член — этого следует избегать, так как в таком случае нарушается инкапсуляция, позволяя caller-у
изменять внутреннее состояние класса вне этого же класса. Лучше, чтобы ваши геттеры
использовали тип возврата по значению или по константной ссылке.

Правило:Геттеры должны использовать тип возврата по значению или по константной
ссылке. Не используйте для геттеров тип возврата по неконстантной ссылке.


Заключение

Инкапсуляция имеет много преимуществ, основное из которых заключается в использовании
класса без необходимости понимания его реализации. Инкапсулированные классы:
 проще в использовании;
 уменьшают сложность программы;
 защищают данные и предотвращают их неправильное использование;
 легче изменять;
 легче отлаживать.

Это значительно облегчает использование классов.