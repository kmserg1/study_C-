Урок No96. Параметры и аргументы функций


В первой главе этого туториала мы рассматривали функции на следующих уроках:
 Урок No12. Функции и оператор возврата return
 Урок No13. Параметры и аргументы функций
 Урок No19. Прототип функции и Предварительное объявление
 Урок No20. Многофайловые программы
 Урок No21. Заголовочные файлы

Перед тем как продолжить, вы должны быть знакомы с концепциями, обсуждаемыми на этих уроках.


Параметры vs. Аргументы

На следующих трех уроках мы поговорим о параметрах и аргументах, поэтому давайте вкратце вспомним их определения.
Параметр функции (или «формальный параметр») — это переменная, создаваемая в объявлении функции:

1 void boo(int x); // объявление (прототип функции). x - это параметр
2
3 void boo(int x) // определение (также объявление). x - это параметр
4 {
5 }

Аргумент (или «фактический параметр») — это значение, которое передает в функцию вызывающий объект (caller):

1 boo(7); // 7 - это аргумент, который передается в параметр x
2 boo(y+1); // выражение y+1 - это аргумент, который передается в параметр x

Когда функция вызывается, все параметры функции создаются как переменные, а значения аргументов копируются в
параметры. Например:

1 void boo(int x, int y)
2 {
3 }
4
5 boo(4, 5);

При вызове функции boo() с аргументами 4 и 5 , создаются параметры x и y функции boo() и им присваиваются
соответствующие значения: 4 и 5 . Результатом будет x = 4 и y = 5 .

Примечание: В примере, приведенном выше, порядок обработки параметров в функции boo() будет справа налево, т.е.
сначала создастся переменная y и ей присвоится значение 5 , а затем уже создастся переменная x и ей присвоится
значение 4 . Порядок, в котором инициализируются параметры в круглых скобках функции, определяет каждый
компилятор отдельно, так как С++ явно не указывает этот порядок обработки. С параметрами-переменными это не
столь важно и критично, но если вы будете использовать в качестве параметров функции вызовы других функций (что
является плохой практикой и не рекомендуется к использованию), то результат может быть неожиданным.

Рассмотрим следующую программу:

1 #include <iostream>
2
3 int prinX()
4 {
5 std::cout << "x = 4\n";
6 return 0;
7 }
8
9 int prinY()
10 {
11 std::cout << "y = 5\n";
12 return 0;
13 }
14
15 void prinAll(int a, int b) {}
16
17 int main() {
18
19 prinAll(prinX(), prinY());
 // в качестве параметров функции используются вызовы функций X() и Y()
20 return 0;
21 }

Результат выполнения программы:
y = 5
x = 4


Хотя параметры не объявлены внутри блока функции, они имеют локальную область видимости. Это означает, что они
создаются при вызове функции и уничтожаются, когда блок функции завершается:

1 void boo(int x, int y) // x и y создаются здесь
2 {
3 } // x и y уничтожаются здесь

Существует 3 основных способа передачи аргументов в функцию:
 передача по значению;
 передача по ссылке;
 передача по адресу.

Мы рассмотрим каждый из этих способов по порядку.

