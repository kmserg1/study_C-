Урок No26. Отладка программ: степпинг и точки останова

Как ни странно,программирование может бытьсложнымиошибок может бытьочень много.Ошибки, как правило, попадают
в одну из двух категорий: синтаксические или семантические/смысловые.

Оглавление:
1. Типы ошибок
2. Отладчик
3. Степпинг
	- Команда «Шаг сзаходом»
	- Команда «Шаг собходом»
	- Команда «Шаг свыходом»
4. Команда «Выполнить до текущей позиции»
5. Команда «Продолжить»
6. Точки останова


Типы ошибок

Синтаксическая ошибка возникает, когда вы пишете код, который не соответствует правилам грамматики языка C++.
Например, пропущенные точки с запятой, необъявленные переменные, непарные круглые или фигурные скобки и т.д. В
следующей программе есть несколько синтаксических ошибок:
1 #include <iostream>; // директивы препроцессора не заканчиваются точкой с запятой
2
3 int main()
4 {
5 std:cout < "Hi there; << x; // недействительный оператор (:), незаконченное предложение (пропущено ") и необъявленная переменная
6 return 0 // пропущена точка с запятой в конце стейтмента
7 }

К счастью, компилятор ловит подобные ошибки и сообщает о них в виде предупреждений или ошибок.

Семантическая ошибка возникает, когда код является синтаксически правильным, но делает не то, что задумал программист.
Иногда это может привести к сбою в программе, например, если делить на ноль:

1 #include <iostream>
2
3 int main()
4 {
5 int a = 10;
6 int b = 0;
7 std::cout << a << " / " << b << " = " << a / b;  // делить на 0 нельзя
8 return 0;
9 }

Иногда этоможет привести к неверным результатам:

1 #include <iostream>
2
3 int main()
4 {
5 std::cout << "Hello, word!"; // орфографическая ошибка
6 return 0;
7 }

Либо делать вообще не то, что нужно:
1 #include <iostream>
2
3 int add(int x, int y)
4 {
5 return x - y; // функция должна выполнять сложение, но выполняет вычитание
6 }
7
8 int main()
9 {
10 std::cout << add(5, 3); // должно быть 8, но результат - 2
11 return 0;
12 }

К сожалению, компилятор не ловит подобные ошибки,так как он проверяет только то, что вы написали, а не то, что вы хотели
этим сделать.
В примерах, приведенных выше, ошибки довольно легко обнаружить. Но в большинстве программ (в которых больше 40строк
кода), семантические ошибки увидеть с помощью простого просмотра кода будет не так-то и легко.
И здесь нам на помощь приходит отладчик.


Отладчик

Отладчик (или «дебаггер», отангл.«debugger») — это компьютерная программа, которая позволяет программисту
контролировать выполнение кода. Например, программист может использовать отладчик для выполнения программы
пошагово, последовательно изучая значения переменных в программе.
Старые дебаггеры, такиекак GDB, имели интерфейс командной строки, где программисту приходилось вводить специальные
команды для старта работы. Современные дебаггеры имеют графический интерфейс, что значительно упрощает работу с
ними. Сейчас почти все современные IDE имеют встроенные отладчики. То есть, вы можете использоватьодну среду
разработки как для написания кода,так и для его отладки (вместо постоянного переключения между разными программами).
Базовый функционал у всех отладчиков один и тот же. Отличаются они, как правило, тем, как этот функционал и доступк нему
организованы, горячими клавишамии дополнительными возможностями.

Степпинг
Степпинг (англ. «stepping») — это возможность отладчика выполнять код пошагово (строка за строкой). Есть три команды
степпинга:
 Команда "Шаг с заходом"
 Команда "Шаг с обходом"
 Команда "Шаг с выходом"

Мы сейчас рассмотрим каждую из этих команд в индивидуальном порядке.
Примечание: Перед тем как продолжить, убедитесь, что вы находитесь в режиме конфигурации «Debug». Все
скриншоты данного урока выполнены в Visual Studio 2019.

Команда «Шаг с заходом»
Команда «Шагс заходом» (англ.«Step into») выполняет следующую строку кода. Если этой строкой является вызов функции,
то «Шаг с заходом» открывает функцию и выполнение переносится в начало этой функции.
Давайте рассмотрим очень простую программу:

1 #include <iostream>
2
3 void printValue(int nValue)
4 {
5 std::cout << nValue;
6 }
7
8 int main()
9 {
10 printValue(5);
11 return 0;
12 }

Как вы уже знаете, при запуске программы выполнение начинается с вызова главной функции main(). Так как мы хотим
выполнить отладку внутри функции main(), то давайте начнем с использования команды «Шаг с заходом».
В Visual Studio, перейдите в меню "Отладка" > "Шаг с заходом" (либо нажмите F11):
...скриншот...
Если вы используете другую IDE, то найдите в меню команду "Step Into/Шаг с заходом" и выберите её.
Когда вы это сделаете, должны произойти две вещи. Во-первых, так как наше приложение является консольной программой,
то должно открыться консольное окно. Оно будет пустым, так как мы еще ничего не выводили. Во-вторых, вы должны увидеть
специальный маркер слева возле открывающей скобки функции main(). В Visual Studio этим маркером является жёлтая
стрелочка(есливы используете другую IDE, то должно появиться что-нибудь похожее):
Стрелка-маркер указывает на следующую строку, которая будетвыполняться. В этом случае отладчик говоритнам, что
следующей строкой, которая будет выполняться, — будет открывающая фигурнаяскобка функции main(). Выберите «Шаг с
заходом» еще раз — стрелка переместится на следующую строку:
...скриншот...
Это значит, что следующей строкой, которая будет выполняться, будет вызов функции printValue(). Выберите «Шаг с
заходом» еще раз. Поскольку printValue() — это вызов функции, то мы переместимся в начало функции printValue():
Выберите еще раз «Шаг с заходом» для выполнения открывающей фигурной скобки printValue(). Стрелка будет указывать на
std::cout << nValue; .

Теперь выберите «Шаг с обходом» (F10). Вы увидите число 5 в консольном окне.
Выберите «Шаг сзаходом» еще раз для выполнения закрывающей фигурной скобки printValue(). Функция printValue() завершит
свое выполнение и стрелка переместится в функцию main(). Обратите внимание, в main() стрелка снова будет указывать на
вызов printValue():
Может показаться, будто отладчик намеревается еще раз повторить цикл с функцией printValue(), но в действительности он
нам просто сообщает, что он только что вернулся из этой функции.

Выберите «Шаг сзаходом» два раза. Готово, все строки кода выполнены. Некоторые дебаггеры автоматически прекращают
сеанс отладки в этойточке. Но Visual Studio так не делает, так что есливы используете VisualStudio, то выберите "Отладка" >
"Остановить отладку" (или Shift+F5 ):
...скриншот...
Таким образом мы полностью остановили сеанс отладки нашей программы.
 	
Команда «Шаг с обходом»

Как и команда «Шаг с заходом», команда «Шаг с обходом» (англ.«Stepover») позволяет выполнить следующую строку кода.
Только если этой строкой является вызов функции, то «Шаг с обходом» выполнит весь код функции в одно нажатие и возвратит
нам контроль после того, как функция будет выполнена.
Примечание для пользователей Code::Blocks: Команда«Stepover» называется «Next Line».

Рассмотрим пример, используя следующую программу:
1 #include <iostream>
2
3 void printValue(int nValue)
4 {
5 std::cout << nValue;
6 }
7
8 int main()
9 {
10 printValue(5);
11 return 0;
12 }

Нажмите «Шаг с заходом», чтобы дойти до вызова функции printValue():
Теперь, вместо команды «Шаг с заходом», выберите «Шагс обходом» (или F10):
Отладчик выполнит функцию (которая выведет значение 5 в консоль), а затем возвратит нам управление на строке return 0;. 
И это всё за одно нажатие.
Команда «Шаг с обходом» позволяет быстро пропустить код функций, когда мы уверены,чтоони работают корректно и их не
нужно отлаживать.

Команда «Шаг с выходом»

В отличие от двух предыдущих команд, команда «Шаг с выходом» (англ. «Step out») не просто выполняет следующую строку
кода. Она выполняет весь оставшийся код функции, в которой вы сейчас находитесь, и возвращает контроль только после
того, когда функция завершит свое выполнение. Проще говоря, «Шаг с выходом» позволяет выйти из функции.
Обратите внимание, команда «Шаг с выходом» появится в меню «Отладка» только после начала сеанса отладки (что делается
путем использования одной из двух вышеприведенных команд).
Рассмотрим все тот же пример:

1 #include <iostream>
2
3 void printValue(int nValue)
4 {
5 std::cout << nValue;
6 }
7
8 int main()
9 {
10 printValue(5);
11 return 0;
12 }

Нажимайте «Шагс заходом» до тех пор, пока не перейде те к открывающей фигурной скобке функции printValue():
Затем выберите "Отладка" > "Шаг с выходом" (либо Shift+F11):
Вы заметите, что значение 5 отобразилось в консольном окне, а отладчик перешел к вызову функции printValue() в main():


Команда «Выполнить до текущей позиции»

В то время как степпинг полезен для изучения каждой строки кода по отдельности, в большой программе перемещаться по
коду с помощью этих команд не очень удобно. Но и здесь современные отладчики предлагают еще несколько инструментов
для эффективной отладки программ.
Команда «Выполнить до текуще йпозиции» позволяет в одно нажатие выполнить весь код до строки,о бозначенной
курсором. Затем контроль обратно возвращается к нам, и мы можем проводить отладку с указанной точки уже более детально.
Давайте попробуем, используя уже знакомую нам программу:
1 #include <iostream>
2
3 void printValue(int nValue)
4 {
5 std::cout << nValue;
6 }
7
8 int main()
9 {
10 printValue(5);
11 return 0;
12 }

Поместите курсор на строку std::cout << nValue; внутри функции printValue(), затем щелкните правой кнопкой мыши и
выберите "Выполнить до текущей позиции" (либо Ctrl+F10 ):
...скриншот...
Вы заметите, что жёлтая стрелочка переместится на указанную нами строку. Выполнение программы остановится в этой точке,
и программа будет ждать наших дальнейших команд.

Команда «Продолжить»

Если вы находитесь в середине сеанса отладки вашей программы, то вы можете сообщить отладчику продолжать выполнение
кода до тех пор,пока он не дойдет до конца программы (или до следующей контрольной точки). В Visual Studio эта команда
называется «Продолжить» (англ. «Continue»). В других дебаггерах она может иметь название «Run» или «Go».
Возвращаясь к вышеприведенному примеру, мы находимся как раз внутри функции printValue(). Выберите "Отладка" >
"Продолжить" (или F5 ):
...скриншот...
Программа завершит свое выполнение и выйдет из сеанса отладки.

Точки останова

Точки останова (англ. «breakpoints») — это специальные маркеры, на которых отладчик останавливает процесс выполнения
программы.
Чтобы задать точку останова в Visual Studio, щелкните правой кнопкой мыши по выбранной строке > "Точка останова" >
"Вставить точку останова":
Появится кружочек возле строки:
...скриншот...
В программе, приведенной выше, создайте точку останова на строке std::cout << nValue;.
Затем выберите «Шаг с заходом» для старта сеанса отладки, а затем «Продолжить».
Вы увидите,что вместо завершения выполнения программы и остановки сеанса отладки, отладчик остановится в указанной вами точке:
Точки останова чрезвычайно полезны, если вы хотите изучить только определенную часть кода. Просто задайте точку
останова в выбранном участке кода, выберите команду «Продолжить» и отладчик автоматически остановится возле указанной
строки. Затем вы сможете использовать команды степпинга для более детального просмотра/изучения кода.
