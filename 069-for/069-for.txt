Урок No 69. Цикл for

Безусловно, наиболее используемым циклом в языке C++ является цикл for.

Оглавление:

1. Цикл for
2. Выполнение цикла for
3. Еще примеры циклов for
4. Ошибка неучтенной единицы
5. Пропущенные выражения в цикле
6. Объявление переменных в цикле for
7. Использование циклов for в старых версиях C++
8. Вложенные циклы for
9. Заключение
10. Тест


Цикл for

Цикл for в языке С++ идеален, когда известно необходимое количество итераций. Выглядит он следующим образом:

for(объявлениепеременных;условие;инкремент/декрементсчетчика)
	тело цикла;

Или, преобразуя for в эквивалентный цикл while:

{ // обратите внимание, цикл находится в блоке
	объявление переменных;
	while (условие)
		{
		тело цикла;
		инкремент/декремент счетчика;
		}
} // переменные, объявленные внутри цикла, выходят из области видимости здесь

Переменные, определенные внутри цикла for, имеют специальный тип области видимости: область видимости цикла.
Такие переменные существуют только внутри цикла и недоступны за его пределами.


Выполнение цикла for

Цикл for в C++ выполняется в 3 шага:
 Шаг No 1: Объявление переменных. Как правило, здесь выполняется определение и инициализация счетчиков
	цикла, а точнее — одного счетчика цикла. Эта часть выполняется только один раз, когдацикл выполняется впервые.
 Шаг No 2: Условие. Если оно равно false,то цикл немедленно завершает свое выполнение. Если же условие равно true,
	то выполняется телоцикла.
 Шаг No 3: Инкремент/декремент счетчика цикла. Переменная увеличивается или уменьшается на единицу. После
	этого циклв озвращается к шагу No 2.

Рассмотрим пример цикла for и разберемся детально, как онработает:

1 #include<iostream>
2
3 int main()
4 {
5 for (int count=0; count < 10; ++count)
6	 std::cout <<count<< " ";
7
8 return 0;
9 }

Сначала мы объявляем переменную count и присваиваем ей значение 0. Далее проверяется условие count <10 , а так
как count равен 0, то условие 0 < 10 имеет значение true. Следовательно, выполняется тело цикла, в котором мы
выводим в консоль переменную count (т.е. значение 0).
Затем выполняется выражение ++count, т.е. инкремент переменной. Затем цикл снова возвращается к проверке условия.
Условие 1<10 имеет значение true, поэтому тело цикла выполняется опять. Выводится 1, а переменная count
увеличивается уже до значения 2. Условие 2 <10 является истинным, поэтому выводится 2, а count увеличивается до
3 и так далее.
В конце концов, count увеличивается до 10, а условие 10 < 10 является ложным, и цикл завершается. Следовательно,
результат выполнения программы:
0 1 2 3 4 5 6 7 8 9

Циклы for могут быть несколько сложны для новичков, однако опытные кодеры любят их, так как эти циклы очень
компактны и удобны. Для наглядности, давайте преобразуем цикл for, приведенный выше, в эквивалентный цикл while:

1 #include <iostream>
2
3 int main()
4 {
5 	{// внешние скобки нужны для обеспечения области видимости цикла
6		int count=0;
7       	while(count < 10)
8			{
9			std::cout << count << "";
10			++count;
11 			}
12 	}
13
14 	return 0;
15 }

Обратите внимание, внешние фигурные скобкиздесь необходимы, так как переменная count выходит из области
видимости при завершении цикла.


Еще примеры циклов for

Давайте,ис пользуя цикл for, напишем функцию вычисления значений в степени n:

1 int pow(int base, int exponent)
2 {
3 int total = 1;
4
5 for (intcount=0; count < exponent; ++count)
6	 total *=base;
7
8 return total;
9 }

Функция возвращает значение base^exponent (число в степени n).
base — это число, которое нужно возвести в степень,
а exponent — это степень, в которую нужно возвести base .
 Если экспонент равен 0, то цикл for выполняется 0 раз, и функция возвращает 1.
 Если экспонент равен 1, то цикл for выполняется 1 раз, и функция возвращает 1* base.
 Если экспонент равен 2, то цикл for выполняется 2 раза,и функция возвращает 1 * base *base.

Хотя в большинстве циклов используется инкремент счетчика, мы также можем использовать и декремент счетчика:
1 #include <iostream>
2             
3 int main()
4 {
5   for (intcount=8; count >=0; --count)
6   std::cout << count << " ";
7
8   return 0;
9 }

Результат:
8 7 6 5 4 3 2 1 0

Также с каждой новой итерацией мы можем увеличить или уменьшить значение счетчика больше, чем на единицу:
1 #include <iostream>
2
3 int main()
4 {
5 for (intcount=9; count >=0; count -=2)
6 	std::cout <<count<< " ";
7
8 return 0;
9 }

Результат:
9 7 5 3 1


Ошибка неучтенной единицы

Однаиз самых больших проблем с которой приходится сталкиваться начинающим программистам в циклах for (а также и в
других типах циклов) — этоошибка на единицу (или «ошибка неучтенной единицы»). Она возникает, когда цикл
повторяется на 1 раз больше или на 1 раз меньше нужного количества итераций. Это обычно происходит из-за того, что в
условии используется некорректный оператор сравнения (например, > вместо >= или наоборот). Как правило, эти
ошибки трудно отследить,так как компилятор не будет жаловаться на них, программа будет работать, но её результаты
будут неправильными.
При написании циклов for помните, что цикл будет выполняться до тех пор, пока условие является истинным.
Рекомендуется тестировать циклы, используя разные значения для проверки работоспособности цикла. Хорошей
практикой является проверять циклы с помощью данных ввода (чисел, символов и прочего), которые заставляют цикл
выполниться 0, 1 и 2 раза. Если цикл работает исправно,значит всё ОК.

Правило: Тестируйтесвои циклы, используя входные данные, которые заставляют циклвыполниться 0, 1 и 2 раза.


Пропущенные выражения в цикле

Также в циклахможно пропускать одно или сразу все выражения, например:

1 #include <iostream>
2
3 int main()
4 {
5 int count=0;
6 for(; count < 10; )
7 	{
8	 std::cout << count << " ";
9 	 ++count;
10	}
11
12 return 0;
13 }

Результат:
0 1 2 3 4 5 6 7 8 9

Инициализацию счетчика мы прописали вне тела цикла, а инкремент счетчика — внутри тела цикла. В самом операторе for
мы указалитолько условие. Иногда бывают случаи, когда не требуется объявлятьс четчик цикла (потому что у нас он уже
есть) или увеличивать его (так как мы увеличиваем его каким-то другим способом).
Хоть это и не часто можно наблюдать, но в операторе for можно вообще ничего не указывать. Стоит отметить,что
подобное приведет к бесконечному циклу:

for(;;)
	тело цикла;

Вышеприведенный пример эквивалентен:

while(true)
	тело цикла;


Объявления переменных вцикле for

Хотя в циклах for обычно используется только один счетчик, иногда могут возникать ситуации, когда нужно работать сразу
с несколькимип еременными. Для этого используется оператор Запятая. Например:

1 #include <iostream>
2
3 int main()
4 {
5 int aaa, bbb;
6 for(aaa = 0, bbb = 9; aaa < 10; ++aaa,--bbb)
7 std::cout << aaa <<" "<< bbb << std::endl;
8
9 return 0;
10 }
Этот цикл присваивает значения двум ранее объявленным переменным: aaa = 0 и bbb= 9.
Только с каждой итерацией переменная aaa увеличивается на единицу, а bbb — уменьшается на единицу.
Результат выполнения программы:
0 9
1 8
2 7
3 6
4 5
6 3
5 4
7 2
8 1
9 0

Примечание: Вышеприведенный цикл можно переписать следующим образом:

1 #include<iostream>
2
3 int main()
4 {
5 for (int aaa = 0,bbb=9; aaa < 10; ++aaa,--bbb)
6 std::cout<< aaa <<""<< bbb <<std::endl;
7
8 return 0;
9 }

Вэтом случае запятая в объявлении переменных является частью синтаксиса,а не использованием 
оператора Запятая. Но эффект идентичен.


Использование циклов for в старых версиях С++

В старых версиях C++ переменные, объявленные в цикле for, не уничтожались при завершении этого цикла. Т.е. у вас
могло получиться что-то вроде следующего:
1 for(int count=0; count < 10; ++count)
2 	std::cout << count << " ";
3
4 // В старых версиях С++ переменная count здесь не уничтожается
5
6 std::cout <<"\n";
7 std::cout <<"I counted to: " << count << "\n"; // поэтому мы можем использовать count даже здесь

Позднее этобыло запрещено, но вы все еще можете увидеть подобное в старом коде.


Вложенные циклы for

Подобно другим типам циклов, одни циклы for могут быть вложены в другиециклы for. В следующем примере мы
разместили один for внутри другого for:
1 #include <iostream>
2
3 int main()
4 {
5 for(charc='a'; c <='e'; ++c) / /внешний цикл по буквам
6 	{
7 	 std::cout<< c;// сначала выводим букву
8
9	 for(int i = 0; i<3; ++i) // внутренний цикл по числам
10		 std::cout<< i;
11
12	 std::cout<< '\n';
13	}
14
15 return 0;
16 }

С одной итерацией внешнего цикла выполняется три итерации внутреннего цикла. Следовательно, результат выполнения
программы:
a012
b012
c012
d012
e012

Заключение

Циклы for являются наиболее часто используемыми циклами в языке C++. Несмотря на то, что их синтаксис, как правило,
немного запутывает начинающих программистов, вы очень скоро к нему привыкните и ощутите всюмощь и удобство этих
циклов.


Тест

Задание No 1
Напишите цикл for, который выводит каждое четное число в диапазонео т 0 до 20.
for(int i=0;i<=20;i+=2)
	std::cout << i << ' ';


Ответ No 1
#include <iostream>
 
int main()
{
	for (int count = 0; count <= 20; count += 2)
		std::cout << count << std::endl;
 
	return 0;
}



Задание No 2

Напишите функцию sumTo(), которая принимает целочисленный параметр с именем value и возвращает сумму всех чисел
от 1 до значения value.
Например, если значением value является 5 ,то sumTo(5) должен возвратить 15, исходя из 1 + 2 + 3 + 4 + 5.
Подсказка: Используйте переменную вне тела цикла для хранения суммы чисел,как в примере с функцией pow() в
подзаголовке «Еще примеры циклов for».

int sumTo(int value){
int res(0);
for(int i=1;i<=value;++i)
	res+=i;
return res;
}

Ответ No 2
int sumTo(int value)
{
    int total(0);
    for (int count=1; count <= value; ++count)
        total += count;
 
    return total;
}

Задание No 3
Что не так со следующим циклом?
1 // Выводим все числа от 8 до 0
2 for(unsigned int count=8;count>= 0;--count)
3 cout<< count <<"";

Бесконечный цикл из-за переполнения unsigned int count в якобы последней итерации и превращении его в большое положительое число

Ответ No 3
Этот цикл for выполняется до тех пор, пока count >= 0. Другими словами, он работает до тех пор, пока переменная count не станет 
отрицательным числом. Однако, поскольку count является типа unsigned, то эта переменная никогда не сможет быть отрицательной. 
Следовательно, этот цикл бесконечный! Как правило, рекомендуется избегать использования типов unsigned в цикле, если на это нет веских причин.
