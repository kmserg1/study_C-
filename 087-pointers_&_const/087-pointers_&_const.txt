Урок No87. Указатели и const


На этом уроке мы рассмотрим указатели на константные переменные, указатели на константные
значения, константные указатели и константные указатели на константные значения в языке C++.

Оглавление:
1. Указатели на константные переменные
2. Указатели на константные значения
3. Константные указатели
4. Константные указатели на константные значения
5. Заключение


Указатели на константные переменные

До этого момента все указатели, которые мы рассматривали, были неконстантными указателями на
неконстантные значения:

1 int value = 7;
2 int *ptr = &value;
3 *ptr = 8; // изменяем значение value на 8

Однако, что произойдет, если указатель будет указывать на константную переменную?

1 const int value = 7; // value - это константа
2 int *ptr = &value; // ошибка компиляции: невозможно конвертировать const int* в int*
3 *ptr = 8; // изменяем значение value на 8

Фрагмент кода, приведенный выше, не скомпилируется: мы не можем присвоить неконстантному
указателю константную переменную. Здесь есть смысл, ведь на то она и константа, что её значение
нельзя изменить. Гипотетически, если бы мы могли присвоить константное значение неконстантному
указателю, то тогда мы могли бы разыменовать неконстантный указатель и изменить значение этой же
константы. А это уже является нарушением самого понятия «константа».


Указатели на константные значения

Указатель на константное значение — это неконстантный указатель, который указывает на
неизменное значение. Для объявления указателя на константное значение, используется ключевое
слово const перед типом данных:

1 const int value = 7;
2 const int *ptr = &value; // здесь всё ок: ptr - это неконстантный указатель, который ук
3 *ptr = 8; // нельзя, мы не можем изменить константное значение

В примере, приведенном выше, ptr указывает на константный целочисленный тип данных.
Пока что всё хорошо. Рассмотрим следующий пример:

1 int value = 7; // value - это не константа
2 const int *ptr = &value; // всё хорошо

Указатель на константную переменную может указывать и на неконстантную переменную (как в
случае с переменной value в примере, приведенном выше). Подумайте об этом так: указатель на
константную переменную обрабатывает переменную как константу при получении доступа к ней
независимо от того, была ли эта переменная изначально определена как const или нет. Таким образом,
следующее в порядке вещей:

1 int value = 7;
2 const int *ptr = &value; // ptr указывает на "const int"
3 value = 8; // переменная value уже не константа, если к ней получают доступ через неконстантную переменную

Но не следующее:

1 int value = 7;
2 const int *ptr = &value; // ptr указывает на "const int"
3 *ptr = 8; // ptr обрабатывает value как константу, поэтому изменение значения переменной невозможно

Указателю на константное значение, который сам при этом не является константным (он просто
указывает на константное значение), можно присвоить и другое значение:

1 int value1 = 7;
2 const int *ptr = &value1; // ptr указывает на const int
3
4 int value2 = 8;
5 ptr = &value2; // хорошо, ptr теперь указывает на другой const int


Константные указатели

Мы также можем сделать указатель константным. Константный указатель — это указатель, значение
которого не может быть изменено после инициализации. Для объявления константного указателя
используется ключевое слово const МЕЖДУ звёздочкой и именем указателя:

1 int value = 7;
2 int *const ptr = &value;

Подобно обычным константным переменным, константный указатель должен быть инициализирован
значением при объявлении. Это означает, что он всегда будет указывать на один и тот же адрес. В
вышеприведенном примере ptr всегда будет указывать на адрес value (до тех пор, пока указатель не
выйдет из области видимости и не уничтожится):

1 int value1 = 7;
2 int value2 = 8;
3
4 int * const ptr = &value1; // ок: константный указатель инициализирован адресом value1
5 ptr = &value2; // не ок: после инициализации константный указатель не может быть измене

Однако, поскольку переменная value, на которую указывает указатель, не является константой, то её
значение можно изменить путем разыменования константного указателя:

1 int value = 7;
2 int *const ptr = &value; // ptr всегда будет указывать на value
3 *ptr = 8; // ок, так как ptr указывает на тип данных (неконстантный int)


Константные указатели на константные значения

Наконец, можно объявить константный указатель на константное значение, используя ключевое
слово const как перед типом данных, так и перед именем указателя:

1 int value = 7;
2 const int *const ptr = &value;

Константный указатель на константное значение нельзя перенаправить указывать на другое значение
также, как и значение, на которое он указывает, — нельзя изменить.

Заключение

Подводя итоги, вам нужно запомнить всего лишь 4 правила:
 Неконстантный указатель можно перенаправить указывать на любой другой адрес.
 С помощью указателя на неконстантное значение можно изменить это же значение (на которое
он указывает).
 Константный указатель всегда указывает на один и тот же адрес, и этот адрес не может быть
изменен.
 Указатель на константное значение обрабатывает значение как константное (даже если оно
таковым не является) и, следовательно, это значение через указатель изменить нельзя.

А вот с синтаксисом может быть немного труднее. Просто помните, что тип значения, на который
указывает указатель, всегда находится слева (в самом начале):

1 int value = 7;
2 const int *ptr1 = &value; // ptr1 указывает на "const int", поэтому это указатель на ко
3 int *const ptr2 = &value; // ptr2 указывает на "int", поэтому это константный указатель
4 const int *const ptr3 = &value; // ptr3 указывает на "const int", поэтому это константн

Указатели на константные значения в основном используются в параметрах функций (например, при
передаче массива) для гарантии того, что функция случайно не изменит значение(я) переданного ей
аргумента.
