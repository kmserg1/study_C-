Урок No 65. Оператор switch

На этом уроке мы рассмотрим еще один оператор управления потоком выполнения программы — оператор switch, а
также то, зачем его использовать и как это делать эффективно.

Оглавление:
1. Зачем использовать оператор switch?
2. Оператор switch
3. Лейблы case
4. Лейбл по умолчанию
5. switch и fall-through
7. Несколькостейтментоввнутриблокаswitch
6. switch и оператор break
8. Объявление переменной и её инициализация внутри case
9. Тест                                             
 

Зачем использовать оператор switch?

Хоть мы и можем использовать сразу несколько операторов if/else вместе — читается и смотрится это не очень. Например:

#include <iostream>
 
enum Colors
{
    COLOR_GRAY,
    COLOR_PINK,
    COLOR_BLUE,
    COLOR_PURPLE,
    COLOR_RED
};
 
void printColor(Colors color)
{
    if (color == COLOR_GRAY)
        std::cout << "Gray";
    else if (color == COLOR_PINK)
        std::cout << "Pink";
    else if (color == COLOR_BLUE)
        std::cout << "Blue";
    else if (color == COLOR_PURPLE)
        std::cout << "Purple";
    else if (color == COLOR_RED)
        std::cout << "Red";
    else
        std::cout << "Unknown";
}
 
int main()
{
    printColor(COLOR_BLUE);
 
    return 0;
}


Использование ветвления if/else для проверки значения одной переменной — практика распространенная, 
но язык C++ предоставляет альтернативный и более эффективный условный оператор ветвления switch. 
Вот вышеприведенная программа, но уже с использованием оператора switch:

#include <iostream> 
 
enum Colors {
	COLOR_GRAY,
	COLOR_PINK,
	COLOR_BLUE,
	COLOR_PURPLE,
	COLOR_RED
};
 
void printColor(Colors color)
{
	switch (color)
	{
	case COLOR_GRAY:
		std::cout << "Gray";
		break;
	case COLOR_PINK:
		std::cout << "Pink";
		break;
	case COLOR_BLUE:
		std::cout << "Blue";
		break;
	case COLOR_PURPLE:
		std::cout << "Purple";
		break;
	case COLOR_RED:
		std::cout << "Red";
		break;
	default:
		std::cout << "Unknown";
		break;
	}
}
 
int main()
{
	printColor(COLOR_BLUE);
	return 0;
}

Общая идея операторов switch проста: выражение оператора switch (например, switch(color)) должно производить 
значение, а каждый кейс (англ. «case») проверяет это значение на соответствие. 
Если кейс совпадает с выражением switch, то выполняются инструкции под соответствующим кейсом. Если ни один кейс 
не соответствует выражению switch, то выполняются инструкции после кейса default (если он вообще указан).

Из-за своей реализации, операторы switch обычно более эффективны, чем цепочки if/else. Давайте рассмотрим это более подробно.


Оператор switch

Сначала пишем ключевое слово switch за которым следует выражение, с которым мы хотим работать. Обычно это выражение 
представляет собой только одну переменную, но это может быть и нечто более сложное, например, nX + 2 или nX − nY. 
Единственное ограничение к этому выражению — оно должно быть интегрального типа данных (т.е. типа char, short, int, long, long long или enum). 
Переменные типа с плавающей точкой или неинтегральные типы использоваться не могут.

После выражения switch мы объявляем блок. Внутри блока мы используем лейблы (англ. «labels») для определения всех значений, 
которые мы хотим проверять на соответствие выражению. Существуют два типа лейблов.

Лейблы case

Первый вид лейбла — это case (или просто «кейс»), который объявляется с использованием ключевого слова case и имеет константное выражение. 
Константное выражение — это то, которое генерирует константное значение, другими словами: либо литерал (например, 5), 
либо перечисление (например, COLOR_RED), либо константу (например, переменную x, которая была объявлена с ключевым словом const).

Константное выражение, находящееся после ключевого слова case, проверяется на равенство с выражением, находящимся возле ключевого слова switch. 
Если они совпадают, то тогда выполняется код под соответствующим кейсом.

Стоит отметить, что все выражения case должны производить уникальные значения. То есть вы не сможете сделать следующее:

switch (z)
{
    case 3:
    case 3: // нельзя, значение 3 уже используется!
    case COLOR_PURPLE: // нельзя, COLOR_PURPLE вычисляется как 3!
};

Можно использовать сразу несколько кейсов для одного выражения. Следующая функция использует несколько кейсов для проверки, 
соответствует ли параметр p числу из ASCII-таблицы:

bool isDigit(char p)
{
    switch (p)
    {
        case '0': // если p = 0
        case '1': // если p = 1
        case '2': // если p = 2
        case '3': // если p = 3
        case '4': // если p = 4
        case '5': // если p = 5
        case '6': // если p = 6
        case '7': // если p = 7
        case '8': // если p = 8
        case '9': // если p = 9
            return true; // возвращаем true
        default: // в противном случае, возвращаем false
            return false;
    }
}

В случае, если p является числом из ASCII-таблицы, то выполнится первый стейтмент после кейса — return true;.

Лейбл по умолчанию

Второй тип лейбла — это лейбл по умолчанию (так называемый «default case»), который объявляется с использованием 
ключевого слова default. Код под этим лейблом выполняется, если ни один из кейсов не соответствует выражению 
switch. Лейбл по умолчанию является необязательным. В одном switch может быть только один default. 
Обычно его объявляют самым последним в блоке switch.

В вышеприведенном примере, если p не является числом из ASCII-таблицы, то тогда выполняется лейбл по умолчанию и возвращается false.


switch и fall-through

Одна из самых каверзных вещей в switch — это последовательность выполнения кода. Когда кейс совпал (или выполняется default), то 
выполнение начинается с первого стейтмента, который находится после соответствующего кейса и продолжается до тех пор, пока не будет 
выполнено одно из следующих условий завершения:

   Достигнут конец блока switch.
   Выполняется оператор return.
   Выполняется оператор goto.
   Выполняется оператор break.

Обратите внимание, если ни одного из этих условий завершения не будет, то выполняться будут все кейсы после того кейса, 
который совпал с выражением switch. Например:

switch (2)
{
   case 1: // Не совпадает!
       std::cout << 1 << '\n'; // пропускается
   case 2: // Совпало!
       std::cout << 2 << '\n'; // выполнение кода начинается здесь
   case 3:
       std::cout << 3 << '\n'; // это также выполнится
   case 4:
       std::cout << 4 << '\n'; // и это
   default:
       std::cout << 5 << '\n'; // и это
}

Результат:

2
3
4
5

А это точно не то, что нам нужно! Когда выполнение переходит из одного кейса в следующий, то это 
называется fall-through. Программисты почти никогда не используют fall-through, поэтому в редких случаях, 
когда это все-таки используется — программист оставляет комментарий, в котором сообщает, что fall-through является преднамеренным.


switch и оператор break

Оператор break (объявленный с использованием ключевого слова break) сообщает компилятору, что мы уже сделали всё, что 
хотели с определенным switch (или циклом while, do while или for) и больше не намерены с ним работать. 
Когда компилятор встречает оператор break, то выполнение кода переходит из switch на следующую строку после блока switch. 
Рассмотрим вышеприведенный пример, но уже с корректно вставленными операторами break:

switch (2)
{
   case 1: // не совпадает - пропускается
       std::cout << 1 << '\n';
       break;
   case 2: // совпало! Выполнение начинается со следующего стейтмента
       std::cout << 2 << '\n'; // выполнение начинается здесь
       break; // оператор break завершает выполнение switch
   case 3:
       std::cout << 3 << '\n';
       break;
   case 4:
       std::cout << 4 << '\n';
       break;
   default:
       std::cout << 5 << '\n';
       break;
}
// Выполнение продолжается здесь

Поскольку второй кейс соответствует выражению switch, то выводится 2, и оператор break завершает выполнение блока switch. Остальные кейсы пропускаются.

Предупреждение: Не забывайте использовать оператор break в конце каждого кейса. Его отсутствие — одна из наиболее распространенных ошибок новичков!


Несколько стейтментов внутри блока switch

Еще одна странность в switch заключается в том, что вы можете использовать несколько стейтментов под каждым кейсом, не определяя новый блок:

switch (3)
{
    case 3:
        std::cout << 3;
        boo();
        std::cout << 4;
        break;
    default:
        std::cout << "default case\n";
        break;
}


Объявление переменной и её инициализация внутри case

Вы можете объявлять, но не инициализировать переменные внутри блока case:

switch (x)
{
    case 1:
        int z; // ок, объявление разрешено
        z = 5; // ок, операция присваивания разрешена
        break;
 
    case 2:
        z = 6; // ок, переменная z была объявлена выше, поэтому мы можем использовать её здесь
        break;
 
    case 3:
        int c = 4; // нельзя, вы не можете инициализировать переменные внутри case
        break;
 
    default:
        std::cout << "default case" << std::endl;
        break;
}

Обратите внимание, что, хотя переменная z была определена в первом кейсе, она также используется и во втором кейсе. 
Все кейсы считаются частью одной и той же области видимости, поэтому, объявив переменную в одном кейсе, мы можем 
спокойно использовать её без объявления и в других кейсах.

Это может показаться немного нелогичным, поэтому давайте рассмотрим это детально. Когда мы определяем локальную 
переменную, например, int y;, то переменная не создается в этой точке — она ​​фактически создается в начале блока, 
в котором объявлена. Однако, она не видна в программе до точки объявления. Само объявление не выполняется, оно 
просто сообщает компилятору, что переменная уже может использоваться в коде. Поэтому переменная, объявленная в одном 
кейсе, может использоваться в другом кейсе, даже если кейс, объявляющий переменную, никогда не выполняется.

Однако инициализация переменных непосредственно в кейсах запрещена и вызовет ошибку компиляции. Это связано с тем, 
что инициализация переменной требует выполнения, а кейс, содержащий инициализацию, может никогда не выполниться!

Если в кейсе нужно объявить и/или инициализировать новую переменную, то это лучше всего сделать, используя блок стейтментов внутри кейса:

switch (1)
{
    case 1:
    { // обратите внимание, здесь указан блок 
        int z = 5; // хорошо, переменные можно инициализировать внутри блока, который находится внутри кейса
        std::cout << z;
        break;
    }
    default:
        std::cout << "default case" << std::endl;
        break;
}

Правило: Если нужно инициализировать и/или объявить переменные внутри кейса — используйте блоки стейтментов.

Тест
Задание №1
Напишите функцию calculate(), которая принимает две переменные типа int и одну переменную типа char, которая, 
в свою очередь, представляет одну из следующих математических операций: +, -, *, / или % (остаток от числа). 
Используйте switch для выполнения соответствующей математической операции над целыми числами, а результат возвращайте 
обратно в main(). Если в функцию передается недействительный математический оператор, то функция должна выводить ошибку. 
С оператором деления выполняйте целочисленное деление.

#include <iostream> 

int calculate(int x, int y, char op)
{
switch (op)
	case '+':
		return x+y;
	case '-':	
	        return x-y;
	case '*':	
	        return x*y;
	case '/':	
	        return x/y;
	default:
		std::cout << "error!" << '\n';
		return -1;
}

int main()
{
std::cout << calculate(3,5,'+') << '\n';;
}


Ответ №1

Ответ №1

#include <iostream>
 
int calculate(int x, int y, char op)
{
    switch (op)
    {
        case '+':
            return x + y;
        case '-':
            return x - y;
        case '*':
            return x * y;
        case '/':
            return x / y;
        case '%':
            return x % y;
        default:
            std::cout << "calculate(): Unhandled case\n";
            return 0;
    }
}
 
int main()
{
    std::cout << "Enter an integer: ";
    int x;
    std::cin >> x;
 
    std::cout << "Enter another integer: ";
    int y;
    std::cin >> y;
 
    std::cout << "Enter a mathematical operator (+, -, *, /, or %): ";
    char op;
    std::cin >> op;
 
    std::cout << x << " " << op << " " << y << " is " << calculate(x, y, op) << "\n";
 
    return 0;
}


Задание №2

Определите перечисление (или класс enum) Animal, которое содержит следующих животных: pig, chicken, goat, cat, dog и ostrich. 
Напишите функцию getAnimalName(), которая принимает параметр Animal и использует switch для возврата типа животного в качестве 
строки. 
Напишите еще одну функцию — printNumberOfLegs(), которая использует switch для вывода количества лап соответствующего 
типа животного. Убедитесь, что обе функции имеют кейс default, который выводит сообщение об ошибке. 
Вызовите printNumberOfLegs() в main(), используя в качестве параметров cat и chicken.

Пример результата выполнения вашей программы:

A cat has 4 legs.
A chicken has 2 legs.


# include <iostream>
# include <string>

enum class Animal{
	PIG, 
	CHICKEN, 
	GOAT, 
	CAT, 
	DOG,
	OSTRICH
};

std::string getAnimalName(Animal x){
	switch(x){
		case Animal::PIG:
			return "pig";
		case Animal::CHICKEN:
			return "chicken";
		case Animal::GOAT:
			return "goat";
		case Animal::CAT:
			return "cat";
		case Animal::DOG:
			return "dog";
		case Animal::OSTRICH:
			return "ostrich";
		default:
			return "ERROR!";			
	}
}

int printNumberOfLegs(Animal x)
{
	switch(x){
		case Animal::CHICKEN:
		case Animal::GOAT:
			return 2;
		case Animal::CAT:
		case Animal::DOG:
		case Animal::OSTRICH:
		case Animal::PIG:
			return 4;
		default:
			return -1;
	}
}

int main(){
Animal p1{Animal::GOAT};
Animal p2{Animal::PIG};
std::cout << "A " << getAnimalName(p1) << " has " << printNumberOfLegs(p1) << " legs.\n";
std::cout << "A " << getAnimalName(p2) << " has " << printNumberOfLegs(p2) << " legs.\n";
return 0;
}



Ответ №2

#include <iostream>
#include <string>
 
enum Animal
{
    ANIMAL_PIG,
    ANIMAL_CHICKEN,
    ANIMAL_GOAT,
    ANIMAL_CAT,
    ANIMAL_DOG,
    ANIMAL_OSTRICH
};
 
std::string getAnimalName(Animal animal)
{
    switch (animal)
    {
        case ANIMAL_CHICKEN:
            return "chicken";
        case ANIMAL_OSTRICH:
            return "ostrich";
        case ANIMAL_PIG:
            return "pig";
        case ANIMAL_GOAT:
            return "goat";
        case ANIMAL_CAT:
            return "cat";
        case ANIMAL_DOG:
            return "dog";
 
        default:
            return "getAnimalName(): Unhandled enumerator";
    }
}
 
void printNumberOfLegs(Animal animal)
{
    std::cout << "A " << getAnimalName(animal) << " has ";
 
    switch (animal)
    {
        case ANIMAL_CHICKEN:
        case ANIMAL_OSTRICH:
            std::cout << "2";
            break;
 
        case ANIMAL_PIG:
        case ANIMAL_GOAT:
        case ANIMAL_CAT:
        case ANIMAL_DOG:
            std::cout << "4";
            break;
 
        default:
            std::cout << "printNumberOfLegs(): Unhandled enumerator";
            break;
    }
 
    std::cout << " legs.\n";
}
 
int main()
{
    printNumberOfLegs(ANIMAL_CAT);
    printNumberOfLegs(ANIMAL_CHICKEN);
 
    return 0;
}


