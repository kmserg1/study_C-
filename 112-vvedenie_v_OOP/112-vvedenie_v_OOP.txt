Урок No 112. Введение в ООП


На уроке No 10 мы определили объект в языке C++ как часть памяти, которая используется для
хранения значений. Объект с именем называется переменной.
В традиционном программировании (чем мы занимались до этого момента), программа — это
набор инструкций для компьютера, которые определяют данные (через объекты), а затем
работают с этими данными (через операторы и функции). Объекты и функции, которые работают
с этими данными, являются отдельными единицами, которые объединяются для получения
программистом желаемого результата. Из-за того, что они являются отдельными единицами,
традиционное программирование часто не позволяет использовать интуитивное представление
реальности. Это является делом программиста — управлять и соединять свойства (переменные) с
поведением (функциями) соответствующим образом, что приводит к созданию следующего кода:

1 driveTo(you, work);

Так что же тогда является объектно-ориентированным программированием? Для лучшего
понимания воспользуемся аналогией. Оглянитесь вокруг, везде находятся объекты: книги,
здания, еда и даже вы сами. Объекты имеют два основных компонента:
 свойства (например, вес, цвет, размер, прочность, форма и т.д.);
 поведение, которое они могут проявлять (например, открывать что-либо, делать что-то и
т.д.).
Свойства и поведение неотделимы друг от друга.

Объектно-ориентированное программирование (сокр. «ООП») предоставляет возможность
создавать объекты, которые объединяют свойства и поведение в самостоятельный союз, который
затем можно многоразово использовать. Это приводит к созданию следующего кода:

1 you.driveTo(work);

Так не только читабельнее, но и понятнее, кем является объект ( you — вы) и какое поведение
вызывается ( driveTo — поездка). Вместо того, чтобы сосредоточиться на написании функций, мы
концентрируемся на определении объектов, которые имеют четкий набор поведений. Вот почему
эта парадигма называется «объектно-ориентированной».
Это позволяет создавать программы модульным способом, что упрощает не только написание и
понимание кода, но и обеспечивает более высокий уровень возможности повторного
использования этого кода. Объекты также обеспечивают более интуитивный способ работы с
данными, позволяя программисту определить, как он будет взаимодействовать с объектами, и как
эти объекты будут взаимодействовать с другими объектами.
Обратите внимание, ООП не заменяет традиционные методы программирования. ООП — это
дополнительный инструмент управления сложностью.

Объектно-ориентированное программирование также предоставляет несколько других полезных
концепций, таких как наследование, инкапсуляция, абстракция и полиморфизм. Мы рассмотрим
каждую из этих концепций на соответствующих уроках. Будет много нового материала, но как
только вы разберетесь с ООП, вам уже не захочется возвращаться к традиционному
программированию.

Обратите внимание, термин «объект» перегружен, он имеет несколько значений, что может
вызывать некоторую путаницу. В традиционном программировании, «объект» — это часть памяти
для хранения значений. В объектно-ориентированном программировании, «объект» — это тот же
объект, что и в традиционном программировании, но который соединяет в себе как свойства, так
и способы поведения. С этого момента мы будем использовать термин «объект» в объектно-
ориентированном смысле этого слова.
