d) Каждый тип Монстра имеет свое имя, символ, определенное количество здоровья, урона и золота:
-----------------------------------------------
Type	Name	Symbol	Health	Damage	Gold
-----------------------------------------------
DRAGON	dragon	D	20	4	100
ORC	orc	o	4	2	25
SLIME	slime	s	1	1	10
-----------------------------------------------

Следующий шаг — реализация конструктора класса Monster, с помощью которого можно создавать монстров. 
Этот конструктор должен принимать перечисление Type в качестве параметра, а затем создавать монстра с соответствующими таблице характеристиками.

Это можно реализовать по-разному. Однако, поскольку все наши свойства типов монстров предопределены (не случайны), 
то мы будем использовать таблицу поиска. Таблица поиска — это массив, который содержит все предопределенные атрибуты (свойства) чего-либо. 
Мы можем использовать таблицу поиска для просмотра характеристики определенного типа монстра по мере необходимости.

Как это сделать? Нам нужны всего лишь две вещи. Во-первых, массив с отдельным элементом для каждого типа монстра. 
Во-вторых, этот элемент будет содержать структуру, в которой будут находиться все предопределенные значения атрибутов для конкретного типа монстра.

   Шаг №1: Создайте структуру MonsterData внутри класса Monster. Эта структура должна иметь следующие перечислители: name, symbol, health, damage и gold.

   Шаг №2: Объявите статический массив этой структуры с именем monsterData.

   Шаг №3: Добавьте код определения нашей таблицы поиска вне тела класса:

Monster::MonsterData Monster::monsterData[Monster::MAX_TYPES]
{
	{ "dragon", 'D', 20, 4, 100 },
	{ "orc", 'o', 4, 2, 25 },
	{ "slime", 's', 1, 1, 10 }
};

Теперь мы можем искать любые значения, которые нам нужны! 
Например, чтобы узнать количество золота Dragon, мы можем использовать monsterData[DRAGON].gold.

Используйте эту таблицу поиска для реализации вашего конструктора:

Monster(Type type): Creature(monsterData[type].name, ...)

Следующий код:

#include <iostream>
#include <string>
 
int main()
{
	Monster m(Monster::ORC);
	std::cout << "A " << m.getName() << " (" << m.getSymbol() << ") was created.\n";
}

Должен выдавать следующий результат:
A orc (o) was created.

Ответ №3.d)