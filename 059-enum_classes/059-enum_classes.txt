Урок No59. Классы enum


Хотя перечисления и считаются отдельными типами данных в языке C++, они не столь
безопасны, как кажутся на первый взгляд, и в некоторых случаях позволят вам делать вещи,
которые не имеют смысла. Например:

1 #include <iostream>
2
3 int main()
4 	{
5 	enum Fruits
6 		{
7 		LEMON, // LEMON находится внутри той же области видимости, что и Fruits
8 		KIWI
9 		};
10
11 	enum Colors
12 		{
13 		PINK, // PINK находится внутри той же области видимости, что и Colors
14 		GRAY
15 		};
16
17 	Fruits fruit = LEMON; // Fruits и LEMON доступны в одной области видимости (добавлять префикс не нужно)
18	Colors color = PINK; // Colors и PINK доступны в одной области видимости (добавлять префикс не нужно)
19
20 	if (fruit == color) // компилятор будет сравнивать эти переменные как целые числа
21 		std::cout << "fruit and color are equal\n"; // и обнаружит, что они равны!
22 	else
23		std::cout << "fruit and color are not equal\n";
24
25 	return 0;
26 }

Когда компилятор будет сравнивать переменные fruit и color, он неявно преобразует их в
целочисленные значения и сравнит эти целые числа. Так как значениями этих двух переменных
являются перечислители, которым присвоено значение 0, то это означает, что в примере,
приведенном выше, fruit = color. А это не совсем то, что должно быть, так как fruit и
color из разных перечислений и их вообще нельзя сравнивать (фрукт и цвет!). С обычными
перечислителями нет способа предотвратить подобные сравнения.
Для решения этой проблемыв C++11 добавили классы enum (или «перечисления с областью
видимости»), которые добавляют перечислениям, как вы ужемогли понять, локальную область
видимости со всеми её правилами. Для создания такого класса нужно просто добавить
ключевое слово class сразу после enum. Например:

1 #include <iostream>
2
3 int main()
4 {
5 enum class Fruits // добавление "class" к enum определяет перечисление с ограниченной областью видимости, вместо стандартного "глобального" перечисления 
6 {
7 LEMON, // LEMON находится внутри той же области видимости, что и Fruits
8 KIWI
9 };
10
11 enum class Colors
12 {
13 PINK, // PINK находится внутри той же области видимости, что и Colors
14 GRAY
15 };
16
17 Fruits fruit = Fruits::LEMON; // примечание: LEMON напрямую не доступен, мы должны использовать Fruits::LEMON
18 Colors color = Colors::PINK; // примечание: PINK напрямую не доступен, мы должны использовать Colors::PINK
19
20 if (fruit == color) // ошибка компиляции, поскольку компилятор не знает, как сравнивать разные типы: Fruits и Colors
21 	std::cout << "fruit and color are equal\n";
22 else
23 	std::cout << "fruit and color are not equal\n";
24
25 return 0;
26 }

Стандартные перечислители находятся в той же области видимости, чтои само перечисление (в
глобальной области видимости), поэтому вы можете напрямую получить к ним доступ
(например, PINK). Однако с добавлением класса, который ограничивает область видимости
каждого перечислителя областью видимости его перечисления, для доступа к нему потребуется
оператор разрешения области видимости (например, Colors::PINK). Это значительно снижает
риск возникновения конфликтов имен.
Поскольку перечислители являются частью класса enum, то необходимость добавлять префиксы к
идентификаторам отпадает (например, можно использовать просто PINK вместо COLOR_PINK ,
так как Colors::COLOR_PINK уже будет лишним).
А строгие правила типов классов enum означают, что каждый класс enum считается уникальным
типом. Это означает, что компилятор не сможет сравнивать перечислители из разных
перечислений. Если вы попытаетесь это сделать, компилятор выдаст ошибку (как в примере,
приведенном выше). Однако учтите, что вы можете сравнивать перечислители внутрио дного класса enum (так как эти
перечислители принадлежат одному типу):
1 #include <iostream>
2
3 int main()
4 {
5 enum class Colors
6 {
7 PINK,
8 GRAY
9 };
10
11 Colors color = Colors::PINK;
12
13 if (color == Colors::PINK) // это нормально
14	 std::cout << "The color is pink!\n";
15 else if (color == Colors::GRAY)
16	 std::cout << "The color is gray!\n";
17
18 return 0;
19 }

С классами enum компилятор больше не сможет неявно конвертировать значения
перечислителей в целые числа. Это хорошо! Но иногда могут быть ситуации, когда нужно будет
вернуть эту особенность. В таких случаях вы можете явно преобразовать перечислитель класса
enum в тип int, используя оператор static_cast:

1 #include <iostream>
2
3 int main()
4 {
5 	enum class Colors
6 		{
7 		PINK,
8 		GRAY
9 		};
10
11 	Colors color = Colors::GRAY;
12
13 	std::cout << color; // не будет работать, поскольку нет неявного преобразования в тип int
14 	std::cout << static_cast<int>(color); // результатом будет 1
15
16 	return 0;
17 }

Если вы используете компилятор, поддерживающий C++11, то нет никакого смысла использовать
обычные перечисления вместо классов enum.
Обратите внимание, ключевое слово class вместе с ключевым словомstatic являютсяо дними из
самых запутанных в языке C++, поскольку результат сильно зависит от варианта применения
(контекста). Хотя классы enum используют ключевое слово class, в C++ они не считаются
традиционными «классами». О традиционных классах мы поговорим несколько позже.

