Задание № 1
Почему символьные константы лучше литеральных (магическихчисел)?
Потому, что: 
1. По названию символьной константы можно сделать вівод о ее предназначении
2. Легко изменить символьную константу в месте обїявления и не искать ее вхождения по всей программе


Почему использование const лучше использования директив #define ?
Потому, что: 
1. #define определяется глобально (и может оказаться, что она где-то переопределяется). В противовес - const является обычной переменной со 
своей областью видимости и для нее можно определить пространство имен
2. const легче в отладке

Ответ No 1
Использование литеральных констант (магических чисел) не только усложняет программу, но и затрудняет внесение в нее изменений. 
Символьные константы лучше, так как они дают понимание того, зачем и почему они используются, а также, если вам еще понадобится 
внести изменения — достаточно будет внести правки только в объявлении константы, а не искать их по всему коду. 
Значения констант, объявленных с помощью директивы #define, не отображаются в отладчике, вероятность возникновения конфликта 
имен у таких констант выше.



Задание №2
Выберите подходящий тип данных для переменных в каждой из следующих ситуаций. Будьте как можно более конкретными. 
Если ответом является целочисленный тип данных, то используйте соответствующий тип с фиксированным размером (например, int16_t). 
Если переменная должна быть константной, то так и отвечайте.

   Возраст пользователя. - int

   Нравится ли определенный цвет пользователю? - Bool

   Число Пи. - constexpr long long

   Количество страниц в учебнике. - const int16_t

   Цена акций в долларах (дробь присутствует). - double

   Сколько раз вы моргнули за всю свою жизнь? (Примечание: Ответ исчисляется в миллионах) - int32_t

   Пользователь выбирает опцию с помощью ввода определенной буквы. - const char


Задание №3
Напишите следующую программу. Сначала пользователю предлагается ввести 2 числа типа с плавающей точкой 
(используйте тип double). Затем предлагается ввести один из следующих математических символов: +, -, * или /. 
Программа выполняет выбранную пользователем математическую операцию между двумя числами, а затем выводит результат на экран. 
Если пользователь ввел некорректный символ, то программа ничего не должна выводить. Например:

Enter a double value: 7
Enter a double value: 5
Enter one of the following: +, -, *, or /: *
7 * 5 = 35

Подсказка: Вы можете использовать ветвление if для того, чтобы распознать, ввел ли пользователь определенный математический 
символ (например, +) или нет. Детально об этом читайте в материалах урока №34.
                                                                           

#include <iostream>     

int main(){
std::cout << "Введите 1-е число (double): ";
double a;
std::cin >> a;
std::cout << "Введите 2-е число (double): ";
double b;
std::cin >> b;
std::cout << "Введите операцию (один из символов  +, -, *, или / ) : ";
char op='a';
std::cin >> op;
double res;
if(op=='+') res= a+b;
    else 
    if(op=='-') res= a-b;
        else 
        if(op=='*') res= a*b;
            else
                if(op=='/') res= a/b;
                    else return 1;
std::cout << res << std::endl;
return 0;
}



Задание №4

Это уже немного сложнее. Напишите небольшую программу-симулятор падения мячика с башни. Сначала пользователю предлагается ввести высоту башни в метрах. 
Не забывайте о гравитации (9,8м/с^2) и о том, что у мячика нет начальной скорости (его держат в руках). 
Программа должна выводить расстояние от земли, на котором находится мячик после 0, 1, 2, 3, 4 и 5 секунд падения. 
Минимальная высота составляет 0 метров (ниже мячику падать нельзя).

В вашей программе должен быть заголовочный файл constants.h с пространством имен myConstants. В myConstants определите константу для хранения 
значения силы тяжести на Земле (9.8). В качестве напоминания смотрите урок № 37.

Напишите функцию для вычисления высоты мячика через х секунд падения. Используйте следующую формулу: 
высота мячика над землей = константа_гравитации * x_секунд^2/2.

Пример результата выполнения программы:

Enter the initial height of the tower in meters: 100
At 0 seconds, the ball is at height: 100 meters
At 1 seconds, the ball is at height: 95.1 meters
At 2 seconds, the ball is at height: 80.4 meters
At 3 seconds, the ball is at height: 55.9 meters
At 4 seconds, the ball is at height: 21.6 meters
At 5 seconds, the ball is on the ground.

Примечания:

   В зависимости от начальной высоты, мячик может и не достичь земли в течение 5 секунд — это нормально. 
Мы усовершенствуем эту программу, когда будем рассматривать циклы.

   Символ ^ не является экспонентом в языке C++. В формуле вместо него используйте знак умножения *.