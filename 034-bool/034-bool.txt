Урок No 34. Логический тип данных bool

В реальной жизни перед нами очень часто возникают вопросы, на которые можно ответ однозначно: «Да» или «Нет».
Яблоко является фруктом? Да! Вам нравится спаржа? Нет!
Рассмотрим утверждение: «Яблоко — это фрукт». Является ли это правдой? Да! Яблок действительно является фруктом.
Или как насчет: «Я люблюс паржу». Абсолютная ложь (тьфу!).
Подобные стейтменты, которые имеют только два возможных исхода — да/правда или  нет/ложь, настолько распространены, 
что многие языки программирования добавили специальный тип для работы с ними — логический тип данных. 
В языке С++ это логический тип данных bool(отангл.«boolean»).

 Оглавление:
1. Переменные логического типа данных
2. Использование логического типа данных в ветвлениях if
3. Возвращаемые значения логического типа данных
4. Тест


Переменные логического типа данных
Логические переменные — это переменные,  диапазон которых состоит только из двух возможных значений: true (1) и false (0).
Для объявления логической переменной используется ключевое слово bool:
1 bool b;
Инициализировать логическую переменную или выполнить операцию присваивания можно с помощью ключевых слов true или false:

1 bool b1=true; // копирующая инициализация
2 bool b2(false); //прямая инициализация(C++11)
3 bool b3 {true}; // uniform-инициализация
4 b3=false; // операция присваивания

Аналогично работе унарного оператора минус (-), с помощью которого мы можем сделать число отрицательным, с помощью логического оператора НЕ(!) мы 
можем изменить true на false и наоборот (false на true):
1 bool b1 = !true; //значение b1-false
2 bool b2(!false); //значение b2-true

На самом деле, логические значения не сохраняются как true или false.
Они обрабатываются в виде целых чисел: вместо true — единица, вместо false — ноль.
Следовательно, если мы попытаемся вывести логические значения с помощью std::cout, то увидим либо 0, либо 1:

1 #include <iostream>
2
3 int main()
4 {
5 std::cout << true << std::endl; // вместо true единица
6 std::cout << !true << std::endl; // вместо !true ноль 
7
8 bool b(false);
9 std::cout << b << std::endl; // b - false (0)
10 std::cout << !b ;  <<std::endl; // !b - true (1)
11 return 0;
12 } 


Результат выполнения программы:
1
0
0
1

Если выхотите, чтобы std::cout выводил true или false (вместо целых чисел), то тогда
используйте манипулятор форматирования std::boolalpha:

1 #include <iostream>
2
3 int main()
4 {
5  std::cout << false << std::endl;
6  std::cout << true << std::endl;
7               
8  std::cout << std::boolalpha; //выводим логические значения как "true"или"false"
9
10 std::cout << true << std::endl;
11 std::cout << false << std::endl;
12 return 0;
13 }

Результат выполнения программы:
0
1
true 
false


Использование логического типа данных в ветвлениях if

Очень часто логические переменные используются в ветвлениях if. Ветвление  if выглядит следующим образом:

if (выражение) стейтмент1;
Либо:
if (выражение) стейтмент1;
else стейтмент2;

(выражение) еще называется «условием», либо «условным выражением».

В обоих случаях, если результатом условия является ненулевое значение, товыполняется стейтмент1.
Если же результатом условия является нулевое значение, то  выполняется стейтмент2.
Помните, что true — это 1 (ненулевое значение), а false — это 0 (нулевое значение).

Теперь рассмотрим пример в коде:

1 if (true) //true-этоусловие
2 	std::cout << std::cout << "The condition is true!" <<std::endl;
3 else
4 	std::cout << << "The condition is false!" << std::endl;

Результат:
The condition is true!

Что здесь делается?
Во-первых, мы начинаем с условия if, которым является логическое true, т.е.1 (ненулевое значение), что 
означает, что выполняться будет стейтмент1.

Следующая программа работает аналогично:

1 bool b(false);
2 if(b)
3 	std::cout << std::cout << "b is true!" << std::endl;
4 else
5  	std::cout << "b is false!" << std::endl;

Результат:
b is false!

Здесь, при проверке условия, переменная b имеет значение false. Следовательно, первый стейтмент под if (который true) пропускается, 
а второй, который под else (false) — выполняется.

А теперь рассмотрим пример посложнее. Оператор равенства (==) используется для сравнения двух чисел (являются ли они равными).
Оператор == возвращает true, если операнды  равны и false, если они таковыми не являются:

1 #include <iostream>
2
3 int main()
4 {
5 std::cout << "Enter an integer:";
6 int x;
7 std::cin >> x;
8
9  if (x==0)
10 	std::cout << "The value is zero" << std::endl;
11 else
12 	std::cout << "Thevalue is non-zero" << std::endl;
13 return 0;
14 }

Результат выполнения программы:

Enter an integer: 4
The value is non-zero

Давайте разберемся, что и как здесь работает. Во-первых,мы просим пользователя  ввести целое
число. После этого, с помощью оператора ==, мы проверяем, является ли  пользовательское число нулевым.
В вышеприведенном примере 4 не равно 0, поэтому оператор == определяет условие как false.
Следовательно, выполняется стейтмент2 (тот, который под else),где мы выводим "The value is non-zero".


Возвращаемые значения логического типа данных

Логические значения часто используются в качестве возвращаемых значений в функции.
Названия таких функций очень часто начинаются со слов is (например, isEqual) или has (например, hasCommonDivisor).

Рассмотрим следующий пример:
1 #include <iostream>
2 
3 // Возвращаем true,  если x и y равны, в противном случае - возвращаем false
4 bool isEqual(int x, int y)                                                  
5 {                                                                           
6 	return  (x==y); // оператор == возвращает true, если x равно y,в противном случае - false
7 }                                                                             
8
9 int main()
10 {
11 std::cout <<"Enter an integer:";
12 int x;
13 std::cin >> x;
14 
15 std::cout << "Enter another integer:";
16 int y;
17 std::cin >> y;
18
19 if (isEqual(x,y))
20 	std::cout << x << " and " << y << " are equal" << std::endl;
21  else
22 	std::cout << x << " and " << y <<" are not equal" << std::endl;
23
24 return 0;
25}

Результат выполнения программы:

Enter an integer: 5
Enter an other integer: 5
5 and 5 are equal

Как это работает?
Во-первых, мы указываем значения переменных x и у. Затем проверяется условие, что приводит к вызову функции isEqual(5,5).
Внутри этой функции наши два числа сравниваются между собой (5==5), что приводит к возврату значения true (так как 5=5).
Значение true возвращается обратно в caller. Так как условие истинно, то выполняется стейтмент1, который выводит "5 and 5 are equal".

К логическим значениям нужно немного привыкнуть, но как только вы это сделаете, то удивитесь, насколько они удобны и просты.

Во всех примерах,  приведенных выше,в наших условиях были либо логические значения (true или false) ,либо логические переменные,
либо функции, которые возвращают логическое значение.

А что произойдет, если мы не будем использовать логическое значение в условиях? 
Правильно! Если результатом условия будет любое  ненулевое значение, товыполняться будет стейтмент1.
Поэтому,если попробовать сделать что-то вроде следующего:

1 if (4)
2 	std::cout << "hi";
3 else
4 	std::cout << "bye";

То результатом будет "hi", так как 4 является ненулевым значением.


Тест

Что такое простое число? Правильно! Это целое положительное число больше единицы, которое делится без остатка либо на
себя, либо на единицу. Напишите программу которая просит пользователя  ввести простое целое число, меньшее 10.
Если пользователь ввел одно из следующих чисел: 2, 3, 5 или 7 — программа должна вывести "The digit is prime", в противном случае — 
"The digit is not prime".

Подсказка: Используйте ветвление if для сравнения чисел и логические значения для
отслеживания того, является ли пользовательское число простым или нет.

Ответ
#include  <iostream>
main()
{
std::cout << "Enter prime number, less then 10:" << std::endl;
int i;
std::cin >> i;
if (i==2) 
	std::cout << "The digit is prime" << std::endl;
else 
	if (i==3) 
		std::cout << "The digit is prime" << std::endl;
	else
		if (i==5) 
			std::cout << "The digit is prime" << std::endl;
        	else
			if (i==7) 
				std::cout << "The digit is prime" << std::endl;
			else
				std::cout << "The digit is not prime" << std::endl;

return 0;
}

========================================================

#include <iostream>
 
bool isPrime(int x)
{
    if (x == 2)
        return true;
    if (x == 3)
        return true;
    if (x == 5)
        return true;
    if (x == 7)
        return true;
    return false;
}
 
int main()
{
    std::cout << "Enter a single digit integer: ";
    int x;
    std::cin >> x;
 
    bool prime = isPrime(x);
 
    if (prime)
        std::cout << "The digit is prime" << std::endl;
    else
        std::cout << "The digit is not prime" << std::endl;
 
    return 0;
}



