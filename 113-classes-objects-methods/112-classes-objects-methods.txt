Урок No 113. Классы, Объекты и Методы


Хотя язык C++ предоставляет ряд фундаментальных типов данных (например, char, int, long, float,
double и т.д.), которых бываетдостаточно для решения относительно простых проблем, для
решения сложных проблем функционала этих простых типов может не хватать.

Оглавление:
1. Классы
2. Методы классов
3. Примечаниео структурах в C++
4. Заключение
5. Тест


Классы

Одной из наиболее полезных особенностей языка C++ является возможность определять
собственные типы данных, которые будут лучше соответствовать в решении конкретных
проблем. Вы уже видели, как перечисления и структуры могути спользоваться для создания
собственных пользовательских типов данных. Например, структура для хранения даты:

1 struct DateStruct
2 {
3   int day;
4   int month;
5   int year;
6 };

Перечисления и структуры — это традиционный (не объектно-ориентированный) мир
программирования, в котором мы можем только хранить данные. В C++11 мы можем создать и
инициализировать структуру следующим образом:

1 DateStruct today { 12, 11, 2018}; // используем uniform-инициализацию

Для вывода даты на экран (что может понадобиться выполнить и не раз, и не два) хорошей идеей
будет написать отдельнуюфункцию, например:

1 #include <iostream>
2
3 struct DateStruct
4 {
5 intday;
6 intmonth;
7 intyear;
8 };
9
10 void print(DateStruct &date)
11 {
12 std::cout << date.day<<"/" << date.month << "/" << date.year;
13 }
14
15 int main()
16 {
17 DateStruct today { 12, 11, 2018}; // используем uniform-инициализацию
18
19 today.day = 18; // используем оператор выбора члена для выбора члена структуры
20 print(today);
21
22 return 0;
23 }

Результат выполнения программы:

18/11/2018

В объектно-ориентированном программировании типы данных могут содержать не только
данные, но и функции, которые будут работать с этими данными. Для определения такого типа
данных в языке C++ используется ключевое слово class. Использование ключевого слова class
определяет новый пользовательский тип данных — класс.

В языке C++ классы очень похожи на структуры, за исключением того,что они обеспечивают
гораздо большую мощность и гибкость. Фактически, следующая структура и класс идентичны по
функционалу:

1 struct DateStruct
2 {
3 int day;
4 int month;
5 int year;
6 };
7
8 class DateClass
9 {
10 public:
11 int m_day;
12 int m_month;
13 int m_year;
14 };

Единственным существенным отличием здесья вляется public — ключевое слово в классе (о нем
мы поговорим детально на соответствующем уроке).
Так же, как и объявление структуры, объявление класса не приводит к выделению какой-либо
памяти. Для использования класса нужно объявить переменную этого типа класса:

1 DateClass today { 12, 11, 2018 }; // инициализируем переменную класса DateClass

В языке C++ переменная класса называется экземпляром (или «объектом») класса. Точно так
же, как определение переменной фундаментального типа данных (например, int x) приводит к
выделению памяти для этой переменной, так же и создание объекта класса (например,
DateClass today) приводит к выделению памяти для этого объекта.


Методы классов

Помимо хранения данных, классы могут содержать и функции! Функции, определенные внутри
класса, называются методами. Методы могут быть определены, как внутри, так и вне класса.
Покачто мы будем определять их внутрикласса (для простоты); как определить их вне класса —
рассмотрим несколько позже.
Класс Date с методом вывода даты:

1 class DateClass
2 {
3 	public:
4 	intm_day;
5 	intm_month;
6 	intm_year;
7
8 	void print() // определяем функцию-член
9 	{
10 		std::cout << m_day << "/" << m_month << "/" << m_year;
11 	}
12 };

Точно так же, как к членам структуры, так и к членам (переменным и функциям) класса доступ
осуществляется через оператор выбора членов ( . ):
                                  
1 #include <iostream>
2
3 class DateClass
4 {
5 public:
6 	int m_day;
7 	int m_month;
8 	int m_year;
9
10 	void print()
11 	{
12 		std::cout << m_day << "/" << m_month << "/" << m_year;
13 	}
14 };
15
16 int main()
17 {
18 	DateClass today { 12, 11, 2018 };
19
20 	today.m_day = 18; // используем оператор выбора членов для выбора переменной-члена m_day объекта today класса DateClass
21 	today.print(); // используем оператор выбора членов для вызова метода print() объекта today класса DateClass
22
23 	return 0;
24 }

Результат выполнения программы:
18/11/2018

Обратите внимание, как эта программа похожа на выше приведенную программу, где
используется структура. Однако есть несколько отличий. В версии DateStruct намнужно было
передать переменную структуры непосредственно в функцию print() в качестве параметра. Если
бы мы этого не сделали, то функция print() не знала бы, какую переменную структуры DateStruct
выводить. Нам тогда бы пришлось явно ссылаться на члены структуры внутри функции.
Методы класса работают несколько иначе: все вызовы методов должны быть связаны с объектом
класса. Когда мы вызываем today.print() , то мы сообщаем компилятору вызвать метод
print() объекта today.
Рассмотрим определениеметода print() еще раз:

1 void print() //определяем метод
2 {
3 	std::cout << m_day << "/" << m_month <<"/" << m_year;
4 }

На что фактически ссылаются m_day , m_month и m_year? Они ссылаются на связанный объект
today (который определен caller-ом).

Поэтому,привызове today.print() , компилятор интерпретирует:
 m_day,как today.m_day ;
 m_month , как today.m_month;
 m_year , как today.m_year .

Если бы мы вызвали tomorrow.print(), то m_day ссылался бы на tomorrow.m_day.
По сути, связанный объект неявно передается методу. По этой причине его часто называют
неявным объектом.
Детально о том, как передается неявный объект методу, мы поговорим на соответствующем
уроке. Ключевым моментом здесь является то, что для работы с функциями, не являющимися
членами класса, нам нужно передавать данные в эту функцию явно (в качестве параметров). А для
работы с методами у нас всегда есть неявный объект класса!

Использование префикса m_ (англ. «m» = «members») для переменных-членов помогает различать
переменные-члены от параметров функции или локальных переменных внутри методов класса.
Это полезно по нескольким причинам:
 во-первых, когда мы видим переменную с префиксом m_, то мы понимаем, что работаем с
переменной-членом класса;
 во-вторых, в отличие от параметров функции или локальных переменных, объявленных
внутри функции, переменные-члены объявляются в определении класса. Следовательно, если
мы хотим знать, как объявлена переменная с префиксом m_, мы понимаем, что искать нужно в
определении класса, а не внутри функции.

Обычно программисты пишут имена классов с заглавной буквы.

Правило: Пишите имена классов с заглавнойбуквы.
Вот еще один пример программы с использованием класса:

1 #include <iostream>
2 #include <string>
3
4 class Employee
5 {
6 public:
7 	std::string m_name;
8 	int m_id;
9 	double m_wage;
10
11 	//Метод вывода информации о работнике на экран
12 	void print()
13 	{
14 		std::cout << "Name:" << m_name <<
15 		"\nId: " << m_id <<
16 		"\nWage: $" << m_wage << '\n';
17 	}
18 };
19
20 int main()
21 {
22 	// Определяем двух работников
23 	Employee john { "John",5, 30.00 };
24 	Employee max { "Max", 6, 32.75 };
25
26 	// Выводим информацию о работниках на экран
27      john.print();
28      std::cout<<std::endl;
29      max.print();
30
31	 return 0;
32 }

Результат выполнения программы:
Name: John
Id: 5
Wage: $30
Name: Max
Id: 6
Wage: $32.75

В отличие от обычных функций, порядок, в котором определены методы класса, не имеет
значения!

Примечание о структурах в C++

В языке Cи структуры могут только хранить данныеи не могут иметь связанных методов. После
проектирования классов (используя ключевоеслово class) в языке С++, Бьёрн Страуструп
размышлял о том, нужно ли, чтобы структуры (которые были унаследованы из языка Си) имели
связанные методы. После некоторых размышлений он решил, что нужно. Поэтому в программах,
приведенных выше, мы также можем использовать ключевое слово struct, вместо class, и всё
будет работать!
Многие разработчики (включаяи меня) считают, что это было неправильное решение, поскольку
оно может привести к проблемам, например, справедливо предположить, чтокласс выполнит
очистку памяти после себя (например, класс, которому выделена память, освободит её
непосредственно перед моментом уничтожения самого класса), но предполагать то же самое при
работе со структурами — небезопасно. Следовательно, рекомендуется использовать ключевое
слово struct для структур, используемых только для хранения данных, и ключевое слово class для
определения объектов, которые требуют объединения как данных, так и функций.

Правило: Используйте ключевое слово struct для структур, используемых только для
хранения данных. Используйте ключевое слово class для объектов, объединяющих как
данные, так и функции.


Заключение

Оказывается, Стандартная библиотека C++ полна классов, созданных для нашего удобства.
std::string, std::vector и std::array — это всё типы классов! Поэтому, когда вы создаете объект
любого из этих типов, вы создаете объект класса. А когда вы вызываете функцию с
использованием этих объектов, вы вызываете метод:

1 #include <string>
2 #include <array>
3 #include <vector>
4 #include <iostream>
5
6 int main()
7 {
8 std::string s { "Hello,world!" }; // создаем экземпляр класса string
9 std::array<int, 3> a { 7, 8, 9 }; // создаем экземпляр класса array
10 std::vector<double> v {1.5, 2.6, 3.7 }; // создаем экземпляркласса vector
11
12 std::cout << "length: "<< s.length() << '\n'; // вызываем метод
13
14 return 0;
15 }

Ключевое слово class позволяет создать пользовательский тип данных в языке C++, который
может содержать как переменные-члены, так и методы. Классы — это основа объектно-
ориентированного программирования!

Примечание: Также Вы можете приобрести Самоучитель «Уроки по С++ »в .pdf-формате .


Тест

Задание No 1
Создайте класс Numbers, который содержит два целых числа. Этот класс должен иметь две
переменные-члены для хранения этих двух целых чисел. Вы также должны создать два метода:
 метод set(), который позволит присваивать значения переменным;
 метод print(), которыйбудет выводить значения переменных.
Выполнение следующей функции main():
1 int main()
2 {
3 Numbers n1;
4 n1.set(3, 3); // инициализируем объект n1 значениями 3 и 3
5
6 Numbers n2{ 4, 4 }; // инициализируем объект n2 значениями 4 и 4
7
8 n1.print();
9 n2.print();
10
11 return 0;
12 }

Должно выдавать следующийрезультат:
Numbers(3, 3)
Numbers(4, 4)


class Numbers{
public:
	int m_first;
	int m_second;
	void set(int a, int b){
		m_first=a;
		m_second=b;
	}
	void print(){
		std::cout<<"Numbers(" << m_first << "," << m_second << ");\n";
	}
}

Ответ No 1


Задание No 2
Почему для Numbers должен использоваться класс, а не структура?

Ответ No 2