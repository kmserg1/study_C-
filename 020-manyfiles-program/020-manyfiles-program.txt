Урок №20. Многофайловые программы

Как только программы становятся больше, их следует разбивать на несколько файлов (в целях удобства и улучшения
функциональности). Одним из преимуществ использования IDE является легкость в работе с n-ным количеством файлов. Мы
уже знаем, как создавать и компилировать однофайловые проекты, добавление новых файлов не составит труда.

Оглавление:
1. Многофайловыепроектыв Visual Studio
2. Многофайловыепроектыв Code::Blocks
3. Многофайловыепроектыв GCC/G++
4. Примермногофайловойпрограммы
5. Что-топошло нетак!
6. Тест

Многофайловые проектыв Visual Studio
В Visual Studio щелкните правой кнопкой мыши по имени вашего проекта в "Обозревателе решений", затем "Добавить" >
"Создать элемент...":
Во всплывающем диалоговом окне выберите тип файла, укажите его имя, расположение, а затем нажмите"Добавить":

Также вы можете добавлять файлы к вашему проекту через "Проект" > "Добавить новый элемент...":


Многофайловые проектыв Code::Blocks

В Code::Blocks перейдите в "File" > "New" > "File...":
Затем выберите"C/C++ source" и нажмите "Go":
Затем "Next" (этого окна может и не быть):
Затем"C++" и опять "Next":
Затем укажите имя нового файла (не забудьте расширение .cpp) и его расположение (нажмите на троеточие и выберите путь).
Убедитесь, что поставлены все три галочки (они отвечают за конфигурации сборки). Затем нажмите "Finish":
Готово! Файл добавлен.


Многофайловые проекты в GCC/G++

В командной строке вам нужно будет создать файл, указать его имя и подключить к компиляции, например:
g++ main.cpp add.cpp -o main
(где main.cpp и add.cpp — это имена файлов с кодом, а main — это имя файла-результата)

Пример многофайловой программы

Рассмотрим следующую программу, которая состоит из двух файлов.

add.cpp:
1 intadd(int x, int y)
2 {
3 return x + y;
4 }

main.cpp:
1 #include <iostream>
2
3 int main()
4 {
5 std::cout<<"The sumof3 and 4 is: " << add(3, 4) << std::endl;
6 return 0;
7 }

Попробуйте запустить эту программу. Она не скомпилируется, вы получите следующую ошибку:
add: идентификатор не найден

При компиляции кода, компилятор не знает о существовании функций, которые находятся в других файлах. Это сделано
специально, чтобы функции и переменные с одинаковыми именами, но в разных файлах, не вызывали конфликт имен.
Тем не менее, в данном случае, мы хотим, чтобы main.cpp знал (и использовал) функцию аdd(), которая находится в add.cpp.
Для предоставления доступа main.cpp к функциям add.cpp, нам нужно использовать предварительное объявление:

1 #include <iostream>
2
3 int add(int x, int y); // это нужно для того, чтобы main.cpp знал,что функция add() определена в другом месте
4
5 int main()
6 {
7 std::cout<<"The sumof3 and 4 is: " << add(3, 4) << std::endl;
8 return 0;
9 }

Теперь, когда компилятор будет компилировать main.cpp, он будет знать, что такое add(). Попробуйте запустить эту программу
еще раз.

Что-то пошло не так!
Есть много вещей, которые могут пойти не так, особенно,если вы это делаете в первый раз. Главное — не паниковать:

Пункт No 1: Если вы получили ошибку от компилятора, чтофункция add() не определена в main(), то, скорее всего, вы забыли
записать предварительное объявление функции add() в main.cpp.

Пункт No 2: Если выполучили следующую ошибку от линкера:
unresolved external symbol "int __cdecl add(int,int)" (?add@@YAHHH@Z) referenced in function _main
то возможных решений есть несколько:
a) Cкорее всего, add.cpp некорректно добавлен в ваш проект. Если вы используете Visual Studio или Code::Blocks,то выдолжны
увидеть add.cpp в "Обозревателе решений" в списке файлов вашего проекта или в панели проекта IDE. Если добавленного
файла нет, то щелкните правой кнопкой мыши по вашему проекту и добавьте файл, как это показано выше, а затем повторите
попытку компиляции вашего проекта.
б) Вполне возможно, что вы добавили add.cpp к другому проекту.
в) Вполне возможно,что добавленный файл не подключен к компиляции/линкингу. Щелкните правой кнопкой мыши по имени
вашего добавленного файла и выберите "Свойства":
Убедитесь, что пункт "Исключен из сборки" оставлен пустым или выбрано значение "Нет":

Пункт No 3: Не следует писать следующую строку в main.cpp:
1 #include "add.cpp"
Наличие этой строки приведет к тому, что компилятор вставит всё содержимое add.cpp непосредственно в main.cpp вместо
того,чтобы рассматривать эти файлы как отдельные.

Тест
Разделите следующую программу на дв афайла (main.cpp и input.cpp): main.cpp должен содержать функцию main(), а input.cpp
— функцию getInteger().
Помните,что для функции getInteger() вам понадобится предварительное объявление в main.cpp.
1 #include<iostream>
2
3 int getInteger()
4 {
5 std::cout << "Enter an integer: ";
6 int x;
7 std::cin>>x;
8 return x;
9 }
10
11 int main()
12 {
13 int x = getInteger();
14 int y = getInteger();
15
16 std::cout << x<<" + "<<y << "is" << x +y << '\n';
17 return 0;
18 }

