Урок No138. Перегрузка оператора индексации []


На этом уроке мы рассмотрим перегрузку оператора индексации в языке С++, его использование и нюансы, связанные с
этим.

Оглавление:
1. Перегрузка оператора индексации[]
2. Почему оператор индексации [] использует возврат по ссылке?
3. Использование оператора индексации с константными объектами класса
4. Проверка ошибок
5. Указатели на объекты и перегруженный оператор []
6. Передаваемый аргумент не обязательно должен быть целым числом
7. Заключение
8. Тест


Перегрузка оператора индексации[]

При работе с массивами оператор индексации ( [] ) используется для выбора определенных элементов:
1 myArray[0] =8; // помещаем значение 8 в первый элемент массива

Рассмотрим следующий класс IntArray, в котором в качестве переменной-члена используется массив:

1 #include <iostream>
2
3 class IntArray
4 {
5 private:
6 	int m_array[10];
7 };
8
9 int main()
10 {
11 	IntArray array;
12 	// Как получить доступ к элементамm_array?
13 	return 0;
14 }

Поскольку переменная-член m_array является закрытой, то мы не имеем прямого доступак m_array через объект
array. Это означает, что мы не можем напрямую получить или установить значения элементов m_array. Что делать?
Можно использовать геттеры и сеттеры:

1 classIntArray
2 {
3 private:
4 	int m_array[10];
5
6 public:
7 	void setItem(int index, int value) { m_array[index] = value; }
8 	int getItem(int index) { return m_array[index]; }
9 };

Хотя этоработает, но это не очень удобно. Рассмотрим следующий пример:

1 int main()
2 {
3 	IntArray array;
4 	array.setItem(4, 5);
5
6 	return 0;
7 }

Присваиваем ли мы элементу 4 значение 5 или элементу 5 значение 4? Без просмотра определения метода 
setItem() этого непонять.
Можно также просто возвращать весь массив ( m_array ) и использовать оператор [] для доступа к его элементам:

1 #include <iostream>
2
3 class IntArray
4 {
5 private:
6 	int m_array[10];
7
8 public:
9 	int* getArray() { return m_array; }
10 };
11
12 int main()
13 {
14 	IntArray array;
15 	array.getArray()[4] = 5;
16
17 	return 0;
18 }

Номожно сделать еще проще, перегрузив оператор индексации.
Оператор индексации является одним из операторов, перегрузка которого должна выполняться через метод класса.
Функция перегрузки оператора [] всегда будет принимать один параметр: значение индекса (элемент массива, к которому
требуется доступ). В нашем случае с IntArray нам нужно, чтобы пользователь просто указал в квадратных скобках индекс
для возврата значения элемента поэтому индексу:

1 #include <iostream>
2
3 class IntArray
4 {
5 private:
6 	int m_array[10];
7
8 public:
9 	int& operator[] (const int index);
10 };
11
12 int& IntArray::operator[] (const int index)
13 {
14 	return m_array[index];
15 }

Теперь всякий раз, когда мы будем использовать оператор индексации ( [] ) с объектом класса IntArray, компилятор будет
возвращать соответствующий элемент массива m_array! Это позволит нам непосредственно как получать, так и
присваивать значения элементам m_array :

1 int main()
2 {
3 	IntArray array;
4 	array[4]= 5; // присваиваемзначение
5 	std::cout << array[4]; // выводим значение
6
7 	return 0;
8 }

Всё просто. При обработке array[4] компилятор сначала проверяет, есть ли функция перегрузки оператора []. Если
есть, то он передает в функцию перегрузки значение внутри квадратных скобок (в данном случае 4 ) в качестве аргумента.
Обратите внимание, хотя мы можем указать параметр по умолчанию для функциип ерегрузки оператора [], но вданном
случае, если мы, используя [], не укажем внутри скобок значение индекса, то получим ошибку.


Почему оператор индексации [] использует возврат по ссылке?

Рассмотрим детально, как обрабатывается стейтмент array[4] = 5. Поскольку приоритет оператора индексации выше
приоритета оператора присваивания, то сначала выполняется часть array[4]. array[4] приводит к вызову функции
перегрузки оператора [], которая возвратит array.m_array[4]. Поскольку оператор [] использует возврат по ссылке,
то он возвращает фактический элемент array.m_array[4]. Наше частично обработанное выражение становится
array.m_array[4] = 5 , что является прямой операцией присваивания значения элементу массива.

Из урока No 10 мы уже знаем, что любое значение, которое находится слева от оператора присваивания, должно быть
l-value (переменной с адресом в памяти). Поскольку результат выполнения оператора [] может использоваться в левой
части операции присваивания (например, array[4] = 5), то возвращаемое значение оператора [] должно быть l-value.
Ссылки же всегда являются l-values, так как их можно использовать только с переменными, которые имеют адреса памяти.
Поэтому, используя возврат по ссылке, компилятор останется доволен, что возвращается l-value, и никаких проблем не
будет.

Рассмотрим, что произойдет, если оператор [] будет использовать возврат по значению вместо возврата по ссылке.
array[4] приведет к вызову функции перегрузки оператора [], который будетвозвращать значение элемента
array.m_array[4] (не индекс, а значение по указанному индексу). Например, если значением m_array[4] является 7 , то
выполнение оператора [] приведет к возврату значения 7. array[4] = 5 будет обрабатываться как 7 = 5, что
является бессмысленным! Если вы попытаетесь это сделать, то компилятор выдаст следующую ошибку:

C:VCProjectsTest.cpp(386) : error C2106: '=' : left operand must be l-value


Использование оператора индексации с константными объектами класса

В вышеприведенном примере метод operator[]() не является константным, и мы можем использовать этот метод для
изменения данных неконстантных объектов. Однако,что произойдет, если наш объект класса IntArray будет const?
В этом случае мы не сможем вызывать неконстантный operator[](), так как он изменяет значения объекта (детально о классах и
const читайте в материалах урока No 123).

Хорошей новостью является то, что мы можем определить отдельно неконстантную и константную версии operator[]().
Неконстантная версия будет использоваться с неконстантными объектами, а версия const — с объектами const:

1 #include <iostream>
2
3 class IntArray
4 {
5 private:
6 	int m_array[10] = { 0, 1, 2, 3, 4,5, 6, 7, 8, 9 }; // указываем начальные значения
7
8 public:
9 	int& operator[] (const int index);
10 	const int& operator[] (const int index) const;
11 };
12
13 int& IntArray::operator[] (const int index) // для неконстантных объектов: можетиспользоваться как для присваивания значен
14 {
15 	return m_array[index];
16 }
17
18 const int& IntArray::operator[](constint index) const // для константных объектов: используется только для просмотра (выв
19 {
20 	return m_array[index];
21 }
22
23 int main()
24 {
25 	IntArray array;
26 	array[4] = 5; // хорошо: вызывается неконстантная версия operator[]()
27 	std::cout << array[4];
28
29 	const IntArray carray;
30 	carray[4] = 5;// ошибка компиляции: вызывается константная версия operator[](), которая возвращает константную ссылку.
31 	std::cout << carray[4];
32
33 	return 0;
34 }

Строку carray[4] = 5; нужно закомментировать и программа скомпилируется (это проверка на изменение данных
константных объектов — изменять данные нельзя, можно только выводить).


Проверка ошибок

Еще одним преимуществом перегрузки оператора индексации является то,что мы можем выполнять проверку
передаваемых значений индекса. При прямом доступе к элементам массива (через геттеры и сеттеры), оператор индекса не
проверяет, является ли индекс корректным. Например, компилятор не будет жаловаться на следующий код:

1 int array[7];
2 array[9] = 4; // индекс 9 является некорректным (вне допустимого диапазона)!

Однако, если мы знаем длину нашего массива, мы можем выполнять проверку передаваемого индекса на корректность в
функции перегрузки оператора []:

1 #include <cassert> // для assert()
2
3 class IntArray
4 {
5 private:
6 	int m_array[10];
7
8 public:
9 	int& operator[] (const int index);
10 };
11
12 int& IntArray::operator[] (const int index)
13 {
14 	assert(index >= 0 && index < 10);
15
16 	return m_array[index];
17 }

В примере, приведенном выше, мы использовали стейтмент assert (который находится в заголовочном файле cassert) для
проверки диапазона index . Если выражение внутри assert принимает значение false (т.е. пользователь ввел
некорректный индекс), то программа немедленно завершится с выводом сообщения об ошибке, что лучше, нежели
альтернативный вариант — повреждение памяти. Это самый распространенный способ проверки ошибок с
использованием функций перегрузки.


Указатели на объекты и перегруженный оператор[]

Если вы попытаетесь вызвать operator[]() для указателя на объект, то C++ предположит,что вы пытаетесь индексировать
массив. Рассмотрим следующий пример:

1 #include <cassert> // для assert()
2
3 class IntArray
4 {
5 private:
6 	int m_array[10];
7
8 public:
9 	int& operator[] (const int index);
10 };
11
12 int& IntArray::operator[] (const int index)
13 {
14 	assert(index >= 0 &&index < 10);
15
16 	return m_array[index];
17 }
18
19 int main()
20 {
21 	IntArray *array = new IntArray;
22 	array[4] = 5; // ошибка
23 	delete array;
24
25 	return 0;
26 }

Делов том, что указатель указывает на адрес памяти, а не на значение. Поэтому сначала указатель нужно разыменовать, а
затем уже использовать оператор []:

1 int main()
2 {
3 	IntArray *array = new IntArray;
4 	(*array)[4] = 5; // сначала разыменовываем указатель дляполучения объекта array, а затем вызываем operator[]
5 	delete array;
6
7 	return 0;
8 }

Это ужасно и здесь очень легко наделать ошибок. Не используйте указатели на объекты, если это не является
обязательным.


Передаваемый аргумент не обязательно должен быть целым числом

Как упоминалось выше, C++ передает в функцию перегрузки то, что пользователь указал в квадратных скобках в качестве
аргумента (в большинстве случаев, это целочисленное значение). Однако это не является обязательным требованием и, на
самом деле, вы можете определить функцию перегрузки так, чтобы ваш перегруженный оператор [] принимал значения
любого типа, которого вы только пожелаете (double, string и т.д.). Например:

1  #include <iostream>
2  #include <string>
3
4 class Something
5 {
6 private:
7
8 public:
9 	void operator[] (std::string index);
10 };
11
12 // Нет смысла перегружать оператор [] только для вывода чего-либо,
13 // но это самый простой способ показать, что параметр функции может быть не только целочисленным значением
14 void Something::operator[] (std::string index)
15 {
16 	std::cout << index;
17 }
18
19 int main()
20 {
21 	Something something;
22 	something["Hello, world!"];
23
24 	return 0;
25 }

Результатвыполнения программы:
Hello, world!


Заключение

Перегрузка оператора индексации обычно используется для обеспечения прямого доступак элементам массива, который
находится внутри класса (в качестве переменной-члена). Поскольку строки часто используются в реализации массивов
символов, то оператор [] часто перегружают в классах со строками, чтобы иметь доступ к каждому символу строки
отдельно.


Тест

Задание No1

Контейнер map — это класс, в котором все элементы хранятся в виде пары ключ-значение. Ключ должен быть уникальным
и использоваться для доступа к связанной паре. В этом задании вам нужно будет написать программу, которая позволит
присваивать оценки ученикам, указывая только имя ученика. Для этого используйте контейнер map: имя ученика — ключ,
оценка (тип char) — значение.
a) Сначала напишите структуру StudentGrade с двумя элементами: имя студента (std::string) и оценка (char).

Ответ No 1.a)

b) Добавьте класс GradeMap, который содержит std::vector типа StudentGrade с именем m_map. Добавьте пустой
конструктор по умолчанию.

Ответ No 1.b)

c)Реализуйте перегрузку оператора [] для этого класса. Функция перегрузки должна принимать параметр std::string (имя
ученика) и возвращать ссылку на его оценку. В функции перегрузки сначала выполните поиск указанного имени ученика в
векторе (используйте цикл foreach). Если ученик нашелся, то возвращайте ссылку на его оценку, и всё — готово!
В противном случае, используйте функцию std::vector::push_back() для добавления StudentGrade нового ученика. Когда вы
это сделаете, std::vector добавит себе копию нового StudentGrade (при необходимости изменив размер). 
Наконец, вам нужно будет возвратить ссылку на оценку студента, которого вы только что добавили в std::vector — 
для этого используйте std::vector::back().

Следующая программа должна скомпилироваться без ошибок:

1 #include <iostream>
2
3 int main()
4 {
5 GradeMap grades;
6 grades["John"] = 'A';
7 grades["Martin"] = 'B';
8 std::cout << "John has a grade of " << grades["John"] << '\n';
9 std::cout << "Martinhas a grade of " << grades["Martin"] << '\n';
10
11 return 0;
12 }

--МОЕ РЕШЕНИЕ-------------
#include <iostream> 
#include <string> 
#include <vector> 
#include <cassert>

struct StudentGrade {
	std::string name;
	char grade;
};

class GradeMap{
private:     
	std::vector <StudentGrade> m_map;
public:
	GradeMap(){
	}
	GradeMap(int i){
		m_map.resize(i);
	}

	char& operator[](const std::string &n);

	StudentGrade& operator[](const int i);

};

char& GradeMap::operator[](const std::string &n){

		for(auto &student : m_map)
			if(student.name==n)
				return student.grade;

		m_map.push_back(StudentGrade {n,'C'});
		return m_map.back().grade;
	}

StudentGrade& GradeMap::operator[](const int i){
	assert(i>=0 and i<=m_map.size());
	return m_map.at(i);
}

int main(){
	GradeMap group;

	group["John"]='B';
	group["Ieshua"]='C';
	group["Alex"]='D';
	group["Vu"]='E';
	group["Alberto"]='A';
	group["Fil"]='B';
	group["Ivan"]='C';

	std::string name;
	for(int i=0; i<7; ++i ){
		name=group[i].name;
		std::cout << name << '\t' << group[name] << '\n';
	}
		
	name="XXX";
	std::cout << name << '\t' << group[name] << '\n';
	return 0;
}
-------------------


Ответ No 1.c)



Задание No 2
Класс GradeMap и программа, которую мы написали, неэффективна по нескольким причинам. Опишите один способ
улучшения класса GradeMap.

ОтветNo2

Ответ №2

std::vector не является изначально отсортированным. Это означает, что каждый раз, при вызове operator[](), 
мы будем перебирать весь std::vector для поиска элемента. 
С несколькими элементами это не является проблемой, но, по мере того как их количество будет увеличиваться, 
процесс поиска элемента будет становиться все медленнее и медленнее. Мы могли бы это оптимизировать, сделав m_map отсортированным 
и используя бинарный поиск. 
Таким образом, количество элементов, которые будут использоваться при просмотре во время поиска одного элемента, уменьшится в разы.



Задание No 3

Почему следующая программа не работает должным образом?

1 #include <iostream>
2
3 int main()
4 {
5 	GradeMap grades;
6
7 	char &gradeJohn = grades["John"]; // выполняется push_back
8 	gradeJohn = 'A';
9
10 	char& gradeMartin = grades["Martin"]; // выполняется push_back
11 	gradeMartin ='B';
12
13 	std::cout << "John has a grade of " << gradeJohn<< '\n';
14 	std::cout << "Martin has a grade of " << gradeMartin <<'\n';
15
16 	return 0;
17 }


Ответ No 3

При добавлении Martin, std::vector должен увеличить свой размер. А для этого потребуется динамическое выделение нового 
блока памяти, копирование элементов массива в этот новый блок и удаление старого блока. 
Когда это произойдет, то любые ссылки на существующие элементы в std::vector пропадут! 
Другими словами, после того, как выполнится push_back("Martin"), gradeJohn останется ссылкой на удаленную память. 
Это и приведет к неопределенным результатам.

