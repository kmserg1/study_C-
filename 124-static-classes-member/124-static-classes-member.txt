Урок No 124. Статические переменные-члены класса


На этом уроке мы рассмотрим использование статических переменных-членов классав языке С++.

Оглавление:
1. Статические переменные-члены класса
2. Статические члены не связаны с объектами класса
3. Определение и инициализация статических переменных-членов класса
4. Инициализация статических переменных-членов внутри тела класса
5. Использование статических переменных-членов класса


Статические переменные-члены класса

Из урока No 51 мы узнали, что статические переменные сохраняют свои значения и не уничтожаются даже после выхода из
блока, в котором они объявлены, например:

1 #include <iostream>
2
3 int generateID()
4 {
5 	static int s_id = 0;
6 	return ++s_id;
7 }
8
9 int main()
10 {
11 	std::cout << generateID() << '\n';
12 	std::cout << generateID() << '\n';
13 	std::cout << generateID() << '\n';
14
15 	return 0;
16 }

Результат выполнения программы:
1
2
3

Обратите внимание, s_id сохраняет свое значение после каждого вызова функции generateID().
Ключевое слово static имеет другое значение, когда речь идет о глобальных переменных — оно предоставляет им
внутреннюю связь (что ограничивает их видимость/использование за пределами файла,в котором они определены).
Поскольку использование глобальных переменных — это зло, то ключевое слово static в этом контексте используется не
очень часто.
В языке C++ ключевое слово static можно использовать в классах: статические переменные - члены и статические методы. Мы
поговорим о статических переменных - членах на этом уроке, а о статических методах на следующем.
Прежде чем мы перейдем к ключевому слову static с переменными-членами класса, давайте сначала рассмотрим следующий
класс:

1 #include <iostream>
2
3 class Anything
4 {
5 public:
6 	int m_value = 3;
7 };
8
9 int main()
10 {
11 	Anything first;
12 	Anything second;
13
14 	first.m_value = 4;
15
16 	std::cout << first.m_value << '\n';
17 	std::cout << second.m_value << '\n';
18
19 	return 0;
20 }

При создании объекта класса, каждый объект получает свою собственную копию всех переменных-членов класса. В этом
случае, поскольку мы объявили два объекта класса Anything, у нас будет две копии m_value : first.m_value и
second.m_value . Это разные значения, следовательно, результат выполнения программы:
4
3

Переменные-члены класса можно сделать статическими, используя ключевое слово static. В отличие от обычных переменных-
членов, статические переменные-члены являютсяобщими для всех объектовкласса. Рассмотрим следующую программу:

1 #include <iostream>
2
3 class Anything
4 {
5 public:
6 	static int s_value;
7 };
8
9 int Anything::s_value = 3;
10
11 int main()
12 {
13 	Anything first;
14 	Anything second;
15
16 	first.s_value = 4;
17
18 	std::cout << first.s_value << '\n';
19 	std::cout << second.s_value << '\n';
20 	return 0;
21 }

Результат выполнения программы:
4
4

Поскольку s_value является статической переменной-членом, то она является общей для всех объектов класса Anything.
Следовательно, first.s_value — это та же переменная, что и second.s_value. Вышеприведенная программа показывает,
что к значению, которое мы установили через первый объект, можно получить доступ и через второй объект.


Статические члены не связаны с объектами класса

Хотявы можете получить доступ к статическим членам через разные объекты класса (как в примере, приведенном выше), но,
оказывается, статические члены существуют, даже если объекты класса не созданы! Подобно глобальным переменным, они
создаются при запуске программы и уничтожаются, когда программа завершает свое выполнение.
Следовательно, статические члены принадлежат классу, а не объектам этого класса. Поскольку s_value существует
независимо от любых объектов класса, то доступ к нему осуществляется напрямую через имя класса и оператор разрешения
области видимости (в данном случае, через Anything::s_value ):

1 #include <iostream>
2
3 class Anything
4 {
5 public:
6 	static int s_value; // объявляем статическую переменную-член
7 };
8
9 int Anything::s_value = 3; // определяем статическую переменную-член
10
11 int main()
12 {
13 	// Примечание: Мы не создаем здесь никаких объектов класса Anything
14
15 	Anything::s_value = 4;
16 	std::cout << Anything::s_value << '\n';
17 	return 0;
18 }

В выше приведенном фрагменте доступ к s_value осуществляется через имя класса, а не через объект этого класса. Обратите
внимание, мы даже не создавали объект класса Anything, но мы все равно имеем доступ к Anything::s_value и можем
использовать эту переменную-член.


Определение и инициализация статических переменных-членов класса

Когда мы объявляем статическую переменную-член внутри тела класса, то мы сообщаем компилятор у о существовании
статической переменной-члена, но не о её определении (аналогией является предварительное объявление). Поскольку
статические переменные-члены не являются частью отдельных объектов класса (они обрабатываются аналогичног лобальным
переменным и инициализируются при запуске программы), то вы должны явно определить статический член вне тела класса
— в глобальной области видимости.
В программе, приведенной выше,это делается следующей строкой кода:

1 int Anything::s_value = 3; // определяем статическую переменную-член

Здесь мы определили статическую переменную-член класса и инициализировали её значением 3 . Если же инициализатор не
предоставлен, то C++ инициализирует s_value значением 0.

Обратите внимание, данное определение статического члена не подпадает под действия спецификаторов доступа: вы
можете определить и инициализировать s_value, даже если он будет private (или protected).

Если класс определен в заголовочном файле, то определение статического члена обычно помещается в файл с кодом класса
(например, в Anything.cpp). Если класс определен в файле .cpp, то определение статического члена обычно пишется
непосредственно под классом. Не пишите определение статического члена класса в заголовочномфайле (подобно глобальным
переменным). Если этот заголовочный файл подключают больше одного раза,то вы получите несколько определений одного
члена, что приведет к ошибке компиляции.


Инициализация статических переменных-членов внутри тела класса

Есть несколько обходных путей определения статических членов внутри тела класса. 

Во-первых, если статический член является константным интегральным типом (к которому относятся
и char, и bool) или константным перечислением, то статический член может быть инициализирован внутри тела класса:

1 class Anything
2 {
3 public:
4 	static const int s_value = 5; // статическую константную переменную типа int можно объявить и инициализировать напрямую
5 };

Поскольку здесь статическая переменная-член является целочисленной константой, то дополнительной строки явного
определения вне тела класса уже не требуется.

Во-вторых, начиная с C++11 статические члены constexpr любого типа данных, поддерживающие инициализацию constexpr,
могут быть инициализированы внутри тела класса:

1 #include <array>
2
3 class Anything
4 {
5 public:
6 static constexpr double s_value = 3.4; // хорошо
7 static constexpr std::array<int, 3> s_array = { 3, 4, 5 }; // это работает даже с классами, которые поддерживают инициализацию constexpr
8 };


Использование статических переменных-членов класса

Зачем использовать статические переменные-члены внутри классов? Для присваивания уникального идентификатора каждому
объекту класса (как вариант):

1 #include <iostream>
2
3 class Anything
4 {
5 private:
6 	static int s_idGenerator;
7 	int m_id;
8
9 public:
10 	Anything() { m_id = s_idGenerator++; } // увеличиваем значение идентификатора для следующего объекта
11
12 	int getID() const { return m_id; }
13 };
14
15 // Мы определяем и инициализируем s_idGenerator несмотря на то, что он объявлен как private.
16 // Это нормально, поскольку определение не подпадает под действия спецификаторов доступа
17 int Anything::s_idGenerator = 1; // начинаем наш ID-генератор со значения 1
18
19 int main()
20 {
21 	Anything first;
22 	Anything second;
23 	Anything third;
24
25 	std::cout << first.getID() << '\n';
26 	std::cout << second.getID() << '\n';
27 	std::cout << third.getID() << '\n';
28 	return 0;
29 }

Результат выполнения программы:
1
2
3

Поскольку s_idGenerator является общим для всех объектов класса Anything, то присоздании нового объекта класса Anything
конструктор захватывает текущее значение s_idGenerator , а затем увеличивает его для следующего объекта. Это
гарантирует уникальность идентификаторов для каждого созданного объекта класса Anything.
Статические переменные-члены также могут быть полезны, когда классу необходимо использовать внутреннюю таблицу
поиска (например, массив, используемый для хранения набора предварительно вычисленных значений). Делая таблицу
поиска статической, для всех объектов класса создастся только одна копия (нежели отдельная для каждого объекта класса). Это
поможетсэкономить значительное количество памяти.
