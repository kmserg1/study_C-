Урок No 42. Операторы сравнения

В языке C++ есть 6 операторов сравнения:
----------------------------------------------------------------------------------------------------------
Оператор	 Символ		 Пример		 Операция
----------------------------------------------------------------------------------------------------------
Больше		 >		 x > y		 true, если x больше y, в противном случае — false
Меньше		 <		 x < y		 true, если xменьше y,впротивном случае— false
Больше или равно >=		 x>= y		 true,если x больше/равно y, в противном случае — false
Меньше или равно <=		 x<= y		 true, если x меньше/равно y, в противном случае — false
Равно		 ==		 x== y		 true, если xравно y, в противном случае — false
Неравно		 !=		 x !=y		 true,если x не равноy, в противном случае — false
----------------------------------------------------------------------------------------------------------

Вы уже могли их видеть в коде. Они довольно простые. Каждый из этих операторов вычисляется в логическое значение
true(1) или false(0).
Вот несколько примеров использования этих операторов на практике:

1 #include <iostream>
2
3 int main()
4 {
5 std::cout << "Enter an integer: ";
6 int x;
7 std::cin >> x;
8
9 std::cout << "Enter another integer: ";
10 int y;
11 std::cin >> y;
12
13 if (x == y)
14 std::cout << x << " equals " << y << "\n";
15 if (x != y)
16 std::cout << x << " does not equal " << y << "\n";
17 if (x > y)
18 std::cout << x << " is greater than " << y << "\n";
19 if (x < y)
20 std::cout << x << " is less than " << y << "\n";
21 if (x >= y)
22 std::cout << x << " is greater than or equal to " << y << "\n";
23 if (x <= y)
24 std::cout << x << " is less than or equal to " << y << "\n";
25
26 return 0;
27 }

Результатвыполнения программы:
Enter an integer: 4
Enter another integer: 5
4 does not equal 5
4 is less than 5
4 is less than or equal to 5

Всё просто!
Сравнение чисел типа с плавающей точкой
Сравнение значений типа с плавающей точкой с помощью любого из этих операторов — дело опасное.
Почему? Из-за тех самых небольших ошибок округления, которые могут привести к неожиданным результатам. 
Например:
1 #include <iostream>
2
3 int main()
4 {
5 double d1(100 - 99.99); // должно быть 0.01
6 double d2(10 - 9.99); // должно быть 0.01
7
8 if (d1 == d2)
9 	std::cout << "d1 == d2" << "\n";
10 else if (d1 > d2)
11 std::cout << "d1 > d2" << "\n";
12 else if (d1 < d2)
13 std::cout << "d1 < d2" << "\n";
14
15 return 0;
16 }

Вот так раз:
d1 > d2

В вышеприведенной программе d1 = 0.0100000000000005116,а d2 = 0.0099999999999997868 . Значения обоих этих чисел
очень близки к 0.1, но d1 больше d2. Они не равны.
Иногда сравнение чисел типа с плавающей точкой бывает неизбежным. В таком случае следует использовать операторы > ,
<, >= и <= только еслизначения этих чисел сильно отличаются друг от друга. А вот если два операнда почти равны, то
результат уже может быть неожиданный. В вышеприведенном примере последствия неправильного результата
незначительны, а вот с оператором равенства дела обстоят хуже, так как даже при самой маленькой неточности результат
сразу меняется на противоположный ожидаемому. Не рекомендуется использовать операторы == или != с числами типа с
плавающей точкой. Вместо них следует использовать функцию, которая вычисляет, насколько эквивалентны эти два значения.
Если разницей между ними можно пренебречь, то мы считаемих равными. Значение разницы между числами, которой можно
пренебречь, называется эпсилоном. Оно, обычно, небольшое (например, 0.0000001).
Очень часто начинающие разработчики пытаются писать своисобственные функции определения равенства чисел:

1 #include <cmath> // для функции fabs()
2
3 bool isAlmostEqual(double a, double b, double epsilon)
4 {
5 // Если разница между a и b меньше значения эпсилона, то тогда a и b можно считать равными
6 return fabs(a - b) <= epsilon;
7 }

Примечание: Функция fabs()— это функция из заголовочного файла cmath, которая возвращает абсолютное значение
(модуль) параметра. fabs(а − b) возвращает положительное число как разницу между а и b .
Функция isAlmostEqual() из примера, приведенного выше, сравнивает разницу (a − b) и эпсилон, вычисляя, таким образом,
можно ли считать эти числа равными. Если разница между а и b очень мала, то функция возвращает true.
Хоть это и рабочий вариант, но он не идеален. Эпсилон 0.00001 подходит длячисел около 1.0, но будет слишком большим для
чисел типа 0.0000001 и слишком малым для чисел типа 10000. Это означает, что каждый раз при вызове функции нам нужно
будет выбирать наиболее соответствующий входным данным функции эпсилон.
Дональд Кнут, известный учёный, предложил следующий способ в своей книге «Искусство программирования, том2: Получисленные алгоритмы» (1968):

1 #include <cmath> // для функции fabs()
2
3 // Возвращаем true, если разница между a и b в пределах процента эпсилона
4 bool approximatelyEqual(double a, double b, double epsilon)
5 {
6 return fabs(a - b) <= ( (fabs(a) < fabs(b) ? fabs(b) : fabs(a)) * epsilon);
7 }

Здесь, вместо использования эпсилона как абсолютного числа, мы используем его как умножитель, чтобы подстроиться под
входные данные.
Рассмотрим детально, как работает функция approximatelyEqual(). 
Слева от оператора <= абсолютное значение (а − b) сообщает нам разницу между а и b (положительное число). 
Справа от <= нам нужно вычислить эпсилон, т.е. наибольшее значение разности чисел, которое мы готовы принять. 
Для этого алгоритм выбирает большее из чисел а и b (как приблизительный показатель общей величины чисел), 
а затем умножает его на эпсилон. В этой функции эпсилон представляет собой процентное соотношение.
Например, если разница между числами а и b находится в пределах 1% (больше или меньше), то мы вводим 
эпсилон 1% (1% =1/100 = 0.01). Его значение можно легко регулировать, в зависимости от
обстоятельств (например, 0.01% = эпсилон 0.0001). Чтобы сделать неравенство (!=) вместо равенства — просто вызовите эту
функцию, используя логический оператор НЕ (!),чтобы перевернуть результат:

1 if (!approximatelyEqual(a, b, 0.001))
2 std::cout << a << " is not equal to " << b << "\n";

Но и функция approximatelyEqual() тоже не идеальна, особенно, когда дело доходит до чисел, близких к нулю:
1 #include <iostream>
2 #include <cmath> // для функции fabs()
3
4 // Возвращаем true, если разница между a и b в пределах процента эпсилона
5 bool approximatelyEqual(double a, double b, double epsilon)
6 {
7 return fabs(a - b) <= ((fabs(a) < fabs(b) ? fabs(b) : fabs(a)) * epsilon);
8 }
9
10 int main()
11 {
12 // Значение a очень близко к 1.0, но, из-за ошибок округления, чуть меньше 1.0
13 double a = 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1;
14
15 // Во-первых, давайте сравним значение a (почти 1.0) с 1.0
16 std::cout << approximatelyEqual(a, 1.0, 1e-8) << "\n";
17
18 // Во-вторых, давайте сравним значение a - 1.0 (почти 0.0) с 0.0
19 std::cout << approximatelyEqual(a - 1.0, 0.0, 1e-8) << "\n";
20 }

Возможно,вы удивитесь, но результат:
1
0

Второй вызов не сработал так, как ожидалось. Математика просто ломается, когда делодоходит до нулей.
Но и этого можно избежать, используя как абсолютный эпсилон (то, что мы делали в первом способе), так и относительный
(способ Кнута) вместе:

1 // Возвращаем true, если разница между a и b меньше absEpsilon или в пределах relEpsilon
2 bool approximatelyEqualAbsRel(double a, double b, double absEpsilon, double relEpsilon)
3 {
4 // Проверяем числа на равенство их друг другу - это нужно в тех случаях, когда сравниваемые числа являются нулевыми или "около 0"
5 double diff = fabs(a - b);
6 if (diff <= absEpsilon)
7 return true;
8
9 // В противном случае возвращаемся к алгоритму Кнута
10 return diff <= ( (fabs(a) < fabs(b) ? fabs(b) : fabs(a)) * relEpsilon);
11 }

Здесь мы добавили новый параметр — absEpsilon. Сначала мы сравниваем а и b с absEpsilon , который должен быть
задан как очень маленькое число (например, 1e-12). Таким образом, мы решаем случаи, когда а и b — нулевые значения
или близки к нулю. Если это не так, то мы возвращаемся к алгоритму Кнута.
Протестируем:

1 #include <iostream>
2 #include <cmath> // для функции fabs()
3
4 // Возвращаем true, если разница между a и b в пределах процента эпсилона
5 bool approximatelyEqual(double a, double b, double epsilon)
6 {
7 return fabs(a - b) <= ((fabs(a) < fabs(b) ? fabs(b) : fabs(a)) * epsilon);
8 }
9
10 // Возвращаем true, если разница между a и b меньше absEpsilon или в пределах relEpsilon
11 bool approximatelyEqualAbsRel(double a, double b, double absEpsilon, double relEpsilon)
12 {
13 // Проверяем числа на равенство их друг другу - это нужно в случаях, когда сравниваемые числа являются нулевыми или около н
14 double diff = fabs(a - b);
15 if (diff <= absEpsilon)
16 	return true;
17
18
 // В противном случае, возвращаемся к алгоритму Кнута
19
 return diff <= ((fabs(a) < fabs(b) ? fabs(b) : fabs(a)) * relEpsilon);
20 }
21
22 int main()
23 {
24 // Значение a очень близко к 1.0, но, из-за ошибок округления, чуть меньше 1.0
25 double a = 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1 + 0.1;
26
27 std::cout << approximatelyEqual(a, 1.0, 1e-8) << "\n";
 // сравниваем "почти 1.0" с 1.0
28 std::cout << approximatelyEqual(a - 1.0, 0.0, 1e-8) << "\n"; // сравниваем "почти 0.0" с 0.0
29 std::cout << approximatelyEqualAbsRel(a - 1.0, 0.0, 1e-12, 1e-8) << "\n"; // сравниваем "почти 0.0" с 0.0
30 }

Результат:
1
0
1

С удачно подобранным absEpsilon, функция approximatelyEqualAbsRel() обрабатывает близкие к нулю и нулевые значения
корректно.
Сравнение чисел типа с плавающей точкой — сложная тема, и нет одного идеального алгоритма, который подойдет в любой
ситуации. Однако для большинства случаев, с которыми вы будете сталкиваться, функции approximatelyEqualAbsRel() должно
быть достаточно.

