Урок No35. Символьный тип данных char

Хоть тип char и относится к целочисленным типам данных (и, таким образом, следует всем их правилам), работа сc har
несколько отличается от работы с обычными целочисленными типами.

Оглавление:
1. Тип данных char
2. Вывод символов
3. Операторstatic_cast
4. Вводсимволов
5. Размер,диапазон и знактипа сhar
6. Управляющиесимволы
7. Что использовать: ‘\n’или std::endl?
8. Другие символьныетипы:wchar_t,char16_tиchar32_t
9. Вчёмразница междуодинарными и двойными кавычкамипри использовании с символами?


Тип данных char

Переменнаятипа char занимает 1 байт. Однако вместо конвертации значения типа char в целое число, оно интерпретируется
как ASCII-символ.
ASCII (сокр.от «AmericanStandard CodeforInformation Interchange») — это американский стандартный код для обмена
информацией, который определяет способ представления символов английского языка (+ несколько других) в виде чиселот 0
до 127.
Например: код буквы 'а' — 97, код буквы 'b' — 98. Символы всегда помещаются в одинарные кавычки.

Таблица ASCII-символов:
------------------------------------------------------------------------------------------------
Код	 Символ	 			Код	 Символ	 	Код	 Символ	 Код	 Символ
------------------------------------------------------------------------------------------------
0	NUL (null)	 		 32	 (space) 	64	 @	 96	 `
1	SOH (startofheader)	 	 33	 !	 	65	 A	 97	 a
2	STX(startof text)	 	 34	 ”		66	 B	 98	 b
3	ETX(end oftext)	  	 	 35	 #		67	 C	 99	 c
4	EOT (endoftransmission)  	 36	 $		68	 D	 100	 d
5	ENQ(enquiry)		  	 37	 %		69	 E	 101	 e
6	ACK (acknowledge)	 	 38	 &		70	 F	 102	 f
7	BEL (bell)		  	 39	 ’		71	 G	 103	 g
8	BS(backspace)		  	 40	 (		72	 H	 104	 h
9	HT (horizontal tab)	   	 41	 )		73	 I	 105	 i
10	LF (linefeed/new line)	  	 42	 *		74	 J	 106	 j
11	VT (verticaltab)	   	 43	 +	 	75	 K	 107	 k
12	FF(form feed /newpage)	 	 44	 ,	 	76	 L	 108	 l
13	CR(carriagereturn)	  	 45	 —		77	 M	 109	 m
14	SO(shiftout)		  	 46	 .		78	 N	 110	 n
15	SI(shiftin)		   	 47	 /		79	 O	 111	 o
16	DLE(datalink escape)	  	 48	 0		80	 P	 112	 p
17	DC1(datacontrol1)	   	 49	 1		81	 Q	 113	 q
18	DC2(datacontrol2)	 	 50	 2		82	 R	 114	 r
19	DC3(datacontrol3)	  	 51	 3		83	 S	 115	 s
20	DC4(datacontrol4)	  	 52	 4		84	 T	 116	 t
21	NAK(negativeacknowledge)   	 53	 5		85	 U	 117	 u
22	SYN (synchronousidle)	  	 54	 6		86	 V	 118	 v
23 	ETB (endof transmission block)   55	 7		87	 W	 119	 w
24	CAN (cancel)		 	 56	 8		88	 X	 120	 x
25	EM(end of medium)	  	 57	 9		89	 Y	 121	 y
26	SUB(substitute)	  	 	 58	 :		90	 Z	 122	 z
27	ESC(escape)		   	 59	 ;		91	 [	 123	 {
28	FS (file separator)	  	 60	 <		92	 \	 124	 |
29	GS (group separator)	   	 61	 =		93	 ]	 125	 }
30	RS(recordseparator)	 	 62	 >		94	 ^	 126	 ~
31	US (unitseparator)	  	 63	 ?	 	95	 _	 127	 DEL(delete)
-----------------------------------------------------------------------------------------------------
Символы от 0 до 31 в основном используются для форматирования вывода. Большинство из них уже устарели.
Символы от 32 до 127 используются для вывода. Это буквы, цифры, знаки препинания, которые большинство компьютеров
использует для отображения текста (на английском языке).
Следующие два стейтмента выполняют одно и то же (присваивают переменным типа char целое число 97):

1 char ch1(97); // инициализацияпеременной типа char целым числом 97
2 char ch2('a'); // инициализация переменнойтипа char символом 'a'(97)

Будьте внимательны при использовании фактических чисел с числами, которые используются для представления символов (из
ASCII-таблицы). Следующие два стейтмента выполняют не одно и то же:

1 char ch(5); // инициализация переменной типа char целым числом 5
2 char ch('5'); // инициализацияпеременной типа char символом '5' (53)

Вывод символов

При выводе переменных типа char, объект cout выводит символы вместо цифр:

1 #include <iostream>
2
3 int main()
4 {
5 char ch(97); //несмотря на то, что мыинициализируем переменную ch целым числом
6 std::cout << ch<< std::endl; // cout выводит символ
7 return 0;
8 }

Результат:
a

Также вы можете выводить литералы типа char напрямую:
1 std::cout << 'b' << std::endl;

Результат:
b

Оператор static_cast

Если выхотите вывести символы в виде цифр, а не в виде букв, то вамнужно сообщить cout выводить переменные типа char в
виде целочисленных значений. Не очень хороший способ это сделать — присвоить переменной типа int переменную типа char
и вывести её:

1 #include <iostream>
2
3 int main()
4 {
5 char ch(97);
6 int i(ch); // присваиваем значение переменной ch переменной типа int
7 std::cout << i << std::endl; // выводим значение переменной типа int
8 return 0;
9 }

Результат:
97

Лучшим способом является конвертация переменной из одного типа данных в другой с помощьюо ператора static_cast.
Синтаксис static_cast выглядит следующим образом:

static_cast<новый_тип_данных>(выражение)

Оператор static_cast принимает значение из (выражения) в качестве входных данных и конвертирует его в указанный вами
<новый_тип_данных>.
Пример использования оператора static_cast для конвертации типа char в тип int:
 	
1 #include <iostream>
2
3 int main()
4 {
5 char ch(97);
6 std::cout << ch << std::endl;
7 std::cout << static_cast<int>(ch) << std::endl;
8 std::cout << ch << std::endl;
9 return 0;
10 }

Результат выполнения программы:
a
97
a

Запомните, static_cast принимает (выражение) в качестве входных данных. Если мы используем переменную в (выражении),
то эта переменная изменяет свой тип только в стейтменте с оператором static_cast. Процесс конвертации никак не влияет на
исходную переменную с её значением! В вышеприведенном примере, переменная ch остается переменной типа char с
прежним значением, чему является подтверждением последний стейтмент с cout.
Также в static_cast нет никакой проверки по диапазону, так что если вы попытаетесь использовать числа, которые будут
слишком большие или слишком маленькие для конвертируемого типа, то произойдет переполнение.
Более подробно о static_cast мы еще поговорим на соответствующем уроке.
 	

Ввод символов

Следующая программа просит пользователя ввести символ. Затем она выводит этот символ и его ASCII-код:

1 #include <iostream>
2
3 int main()
4 {
5 std::cout << "Input a keyboard character: ";
6
7 char ch;
8 std::cin >> ch;
9 std::cout << ch << " has ASCII code "<< static_cast<int>(ch) << std::endl;
10
11 return 0;
12 }

Результат выполнения программы:
Input a keyboard character: q
q has ASCII code 113

Обратите внимание, даже если cin позволит вам ввести несколько символов, переменная ch будет хранить только первый
символ (именно он и помещается в переменную). Остальнаячасть пользовательского ввода останется во входном буфере,
который использует cin, и будет доступна для использования последующим вызовам cin.
Рассмотрим это всё на практике:

1 #include <iostream>
2
3 int main()
4 {
5 std::cout << "Input a keyboard character: "; // предположим,что пользователь ввел abcd
6
7 char ch;
8 std::cin >> ch; // ch = 'a', "bcd" останется во входном буфере
9 std::cout << ch << " has ASCII code "<< static_cast<int>(ch) << std::endl;
10
11 //Обратите внимание, следующий cin не просит пользователя что-либо ввести, данные берутся из входного буфера!
12 std::cin >> ch; // ch = 'b', "cd" останется в буфере
13 std::cout << ch << " has ASCII code "<< static_cast<int>(ch) << std::endl;
14
15 return 0;
16 }

Результат выполнения программы:
Input a keyboard character: abcd
a has ASCII code 97
b has ASCII code 98


Размер, диапазон и знак типа сhar

В языке С++ для переменных типа char всегда выделяется 1 байт. По умолчанию, char может быть как signed, такиun signed
(хотя обычно signed). Если вы используете char дляхранения ASCII-символов, товам не нужно указывать знак переменной
(поскольку и signed и unsigned могут содержать значения от 0 до 127).
Но если вы используете тип char для хранения небольших целых чисел, то тогда следует уточнить знак.Переменная типа char
signed может хранить числа от-128 до127. Переменная типа char unsigned имеет диапазон от 0 до 255.

Управляющие символы
В языке C++ есть управляющие символы (или «escape-последовательности»). Они начинаются с бэкслеша (\), а затем
следует определенная буква или цифра.
Наиболее распространенным управляющим символов вязыке С++ является \n , который обозначает символ новой строки:

1 #include <iostream>
2
3 int main()
4 {
5 std::cout << "First line\nSecond line"<< std::endl;
6 return 0;
7 }

Результат:
First line
Second line

Еще одним часто используемым управляющим символом является \t, который заменяет клавишу TAB, вставляя большой
отступ:                                                                                                	

1 #include <iostream>
2
3 int main()
4 {
5 std::cout << "First part\tSecond part";
6 return 0;
7 }

Результат:
First part	Second part

Таблица всех управляющих символов вязыке C++:
---------------------------------------------------------------------------------------------------------------
Название	 		Символ	 	Значение
---------------------------------------------------------------------------------------------------------------
Предупреждение(alert)		  \a	 	Предупреждение(звуковой сигнал)
Backspace			  \b	 	Перемещение курсора на одну позицию назад
formfeed			  \f	 	Перемещение курсора к следующей логической странице
Символновой строки(newline)	  \n	 	Перемещение курсора на следующую строку
Возврат каретки (carriage return) \r	 	Перемещение курсорав начало строки
Горизонтальный таб(horizontaltab) \t	 	Вставка горизонтального TAB
Вертикальный таб(vertical tab)	  \v	 	Вставка вертикального TAB
Одинарная кавычка		  \’	 	Вставка одинарной кавычки (или апострофа)
Двойная кавычка			  \”	 	Вставка двойной кавычки
Бэкслеш 			  \\	 	Вставка обратной косой черты (бэкслеша)
Вопросительный знак		  \?	 	Вставка знака вопроса
Восьмеричное число		  \(number)	Перевод числа из восьмеричной системысчисления в тип char
Шестнадцатеричное число		  \x(number)	Перевод числа из шестнадцатеричной системы счисления в тип char
----------------------------------------------------------------------------------------------------------------
Рассмотрим пример в коде:
1 #include <iostream>
2
3 int main()
4 {
5 std::cout << "\"This is quoted text\"\n";
6 std::cout << "This string contains a single backslash \\" << std::endl;
7 std::cout << "6F in hex is char \'\x6F\'" << std::endl;
8 return 0;
9 }

Результат выполнения программы:
"This is quoted text"
This string contains a single backslash \
6F in hex is char 'o'

Что использовать: ‘\n’ или std::endl?

Вы могли заметить, что в последнем примере мы использовали \n для перемещения курсора на следующую строку. Но мы
могли бы использовать и std::endl. Какая междуними разница? Сейчас разберемся.
При использовании std::cout, данные для вывода могутпомещаться в буфер, т.е. std::cout может не отправлять данные сразу же
на вывод. Вместо этого он может оставить их при себе на некоторое время (в целях улучшения производительности).
И \n, и std::endl оба переводят курсор на следующую строку. Только std::endl еще гарантирует, что все данные из
буфера будут выведены, перед тем, как продолжить.

Так когда же использовать \n , а когда std::endl ?
 Используйте std::endl, когда нужно,чтобы ваши данные выводились сразу же (например, при записи в файл или при
обновлении индикатора состояния какого-либо процесса). Обратите внимание, это может повлечь за собой незначительное
снижение производительности, особенно если запись на устройство происходит медленно (например, запись файла на
диск).
 Используйте \n во всех остальных случаях.

Другие символьные типы: wchar_t, char16_t и char32_t

Тип wchar_t следует избегать практически во всех случаях (кроме тех, когда происходит взаимодействие с Windows API).
Так же, как и стандарт ASCII использует целыечисла для представления символов английского языка, так и другие кодировки
используют целые числа для представления символов других языков. Наиболее известный стандарт (после ASCII) — Unicode,
который имеет взапасе более 110000 целых чисел для представления символов из разных языков.

Существуют следующие кодировки Unicode:
 UTF-32 — требует 32 бита для представления символа.
 UTF-16 — требует 16 бит для представления символа.
 UTF-8 — требует 8 бит для представления символа.

Типы char16_t и char32_t были добавлены в C++11 для поддержки 16-битных и 32-битных символов Unicode (8-битные символы
и так поддерживаются типом char).

В чём разница между одинарными и двойными кавычками прииспользовании с символами?

Как вы уже знаете, символы всегда помещаются в одинарные кавычки (например, 'а' , '+' , '5'). Переменная типа char
представляет только один символ (например, буква а , символ +, число 5). Следующий стейтмент не является корректным:

1 char ch('56'); // переменная типа char может хранить только один символ

Текст, который находится в двойных кавычках, называется строкой (например, "Hello, world!" ).
Строка (тип string) — это набор последовательных символов.

Вы можете использовать литералы типа string в коде:
1 std::cout << "Hello, world!"; // "Hello, world!" - это литерал типа string

Более подробно о типе string мы поговорим на соответствующем уроке.
