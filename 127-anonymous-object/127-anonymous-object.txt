Урок No 127. Анонимные объекты


В некоторых случаях в языке C++ переменная может быть нам нужна только временно. Например:

1 #include <iostream>
2
3 int add(int a, int b)
4 {
5 int result = a + b;
6 return result;
7 }
8
9 int main()
10 {
11 std::cout << add(4, 2);
12
13 return 0;
14 }

В функции add() переменная result используется как временная переменная. Она не выполняет особой роли, функция
использует её только для возврата значения.
Есть более простой способ написать функцию add() — через анонимный объект. Анонимный объект — это значение без
имени. Поскольку имени нет, то и способа ссылаться на этот объект за пределами места, где он создан — тоже нет.
Следовательно, анонимные объекты имеют область видимости выражения и они создаются, обрабатываются и
уничтожаются в пределах одного выражения.

Вот функция add(), приведенная выше, но уже с использованием анонимного объекта:

1 #include <iostream>
2
3 int add(int a, int b)
4 {
5 	return a + b; // a + b анонимный объект создается для хранения и возврата результата выражения
6 }
7
8 int main()
9 {
10 std::cout << add(4, 2);
11
12 return 0;
13 }

При вычислении выражения a + b, результат помещается в анонимный объект. Затем копия анонимного объекта
возвращается по значению обратно в caller, и анонимный объект уничтожается.
Это работает не только с возвращаемыми значениями, но и с параметрами функции. Например, вместо этого:

1 #include <iostream>
2
3 void printResult(int value)
4 {
5 	std::cout << value;
6 }
7
8
 int main()
9 {
10 	int result = 4 + 2;
11 	printResult(result);
12 	return 0;
13 }

Мы можем написать это:

1 #include <iostream>
2
3 void printResult(int value)
4 {
5 	std::cout << value;
6 }
7
8 int main()
9 {
10 	printResult(4 + 2);
11 	return 0;
12 }

В этом случае выражение 4 + 2 генерирует результат 6, который помещается в анонимный объект. Затем копия этого
анонимного объекта передается в функцию printResult() (которая выводит значение 6 ) и уничтожается.
Обратите внимание, насколько чище стал наш код — нам не нужно засорять его временными переменными, которые
используются толькоодин раз.


Анонимные объекты класса

Хотя в вышеприведенных примерах мы использовали только фундаментальные типы данных, анонимные объекты также могут
использоваться и с классами. Достаточно просто не указывать имя объекта:

1 Dollars dollars(7); // обычный объект класса
2 Dollars(8); // анонимный объект класса

В примере, приведенном выше, строка Dollars(8); создаст анонимный объект класса Dollars, инициализирует его
значением 8 , а затем уничтожит. В этом контексте пользы мы много не получим. Рассмотрим пример, где это может принести
пользу:

1 #include <iostream>
2
3 class Dollars
4 {
5 private:
6 	int m_dollars;
7
8 public:
9 	Dollars(int dollars) { m_dollars = dollars; }
10
11 	int getDollars() const { return m_dollars; }
12 };
13
14 void print(const Dollars &dollars)
15 {
16 	std::cout << dollars.getDollars() << " dollars.";
17 }
18
19 int main()
20 {
21 	Dollars dollars(7);
22 	print(dollars);
23
24 	return 0;
25 }

Здесь функция main() передает объект dollars в функцию print(). Мы можем упростить эту программу, используя анонимные
объекты:

1 #include <iostream>
2
3 class Dollars
4 {
5 private:
6 	int m_dollars;
7
8 public:
9 	Dollars(int dollars) { m_dollars = dollars; }
10
11 	int getDollars() const { return m_dollars; }
12 };
13
14 void print(const Dollars &dollars)
15 {
16 	std::cout << dollars.getDollars() << " dollars.";
17 }
18
19 int main()
20 {
21 	print(Dollars(7)); // здесь мы передаем анонимный объект класса Dollars
22
23 	return 0;
24 }

Результат выполнения программы:
7 dollars.

Теперь рассмотрим пример сложнее:

1 #include <iostream>
2
3 class Dollars
4 {
5 private:
6 	int m_dollars;
7
8 public:
9 	Dollars(int dollars) { m_dollars = dollars; }
10
11 	int getDollars() const { return m_dollars; }
12 };
13
14 Dollars add(const Dollars &d1, const Dollars &d2)
15 {
16 	Dollars sum = Dollars(d1.getDollars() + d2.getDollars());
17 	return sum;
18 }
19
20 int main()
21 {
22 Dollars dollars1(7);
23 Dollars dollars2(9);
24 Dollars sum = add(dollars1, dollars2);
25 std::cout << "I have " << sum.getDollars() << " dollars." << std::endl;
26
27 return 0;
28 }

В функции add() у нас есть значение переменной sum класса Dollars, которое используется в качестве промежуточного
значения для хранения результата и его возврата. И в функции main() у нас есть значение переменной sum класса Dollars,
которое также используется, как промежуточное.
Можно сделать проще, используя анонимные объекты:

1 #include <iostream>
2
3 class Dollars
4 {
5 private:
6 	int m_dollars;
7
8 public:
9 	Dollars(int dollars) { m_dollars = dollars; }
10
11 	int getDollars() const { return m_dollars; }
12 };
13
14 Dollars add(const Dollars &d1, const Dollars &d2)
15 {
16 	return Dollars(d1.getDollars() + d2.getDollars()); // возвращаем анонимный объект класса Dollars
17 }
18
19 int main()
20 {
21 	Dollars dollars1(7);
22 	Dollars dollars2(9);
23 	std::cout << "I have " << add(dollars1, dollars2).getDollars() << " dollars." << std::endl; // выводим анонимный объект кла
24
25 	return 0;
26 }

Эта версия функции add() идентична вышеприведенной функции add(), за исключением того, что вместо отдельного объекта
используется анонимный объект класса Dollars. Также обратите внимание, в функции main() мы больше не используем
переменную с именем sum. Вместо нее мы используем возвращаемое анонимное значение из функции add()!

В результате, наша программа стала короче, чище и проще. Фактически, поскольку dollars1 и dollars2 используются
только в одном месте, мы можем еще упростить этот код с помощью анонимных объектов:

1 #include <iostream>
2
3 class Dollars
4 {
5 private:
6 	int m_dollars;
7
8 public:
9 	Dollars(int dollars) { m_dollars = dollars; }
10
11 	int getDollars() const { return m_dollars; }
12 };
13
14 Dollars add(const Dollars &d1, const Dollars &d2)
15 {
16 	return Dollars(d1.getDollars() + d2.getDollars()); // возвращаем анонимный объект класса Dollars
17 }
18
19 int main()
20 {
21 	std::cout << "I have " << add(Dollars(7), Dollars(9)).getDollars() << " dollars." << std::endl; // выводим анонимный объект
22
23 return 0;
24 }


Заключение

Анонимные объекты вязыке C++ используются для передачи или возврата значений без необходимости создавать большое
количество временных переменных. Динамическое выделение памяти также выполняется через анонимные объекты
(поэтому адрес выделенной памяти должен быть присвоен указателю, иначе мы не имели бы способа ссылаться/использовать её).

Стоит еще отметить, что анонимные объекты рассматриваются как r-values (а не как l-values, у которых есть адрес). Это
означает, что анонимные объекты могут передаваться или возвращаться только по значению или по константной ссылке. В
противном случае, должна использоваться переменная.
Помните, что анонимные объекты можно использовать только один раз, так как они имеют область видимости выражения.
Если вам нужно ссылаться на значение в нескольких выражениях, то для этого следует использовать отдельную переменную.
