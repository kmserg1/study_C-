Урок No110. Аргументы командной строки


На этом уроке мы рассмотрим, что такое аргументы командной строки в языке C++ и то, как они используются.

Оглавление:
1. Аргументы командной строки
2. Передача аргументов командной строки
3. Использование аргументов командной строки
4. Обработка числовых аргументов
5. Анализ аргументовкоманднойстроки
6. Заключение


Аргументы командной строки

Из урока No 3 мы уже знаем, что при компиляции и линкинге, компилятор создает исполняемый файл. Когда программа
запускается, выполнение начинается с первойс троки функции main(). До этого урока мы объявляли main() следующим
образом:

1 int main()

Обратите внимание, в этой версии функции main() никаких параметров нет. Тем не менее, многие программы нуждаются в
некоторых входных данных. Например, предположим, что вы пишете программу под названием Picture, которая принимает
изображение в качестве входных данных, а затем делает из этого изображения миниатюру (уменьшенная версия
изображения). Как функция picture() узнает, какое изображение нужно принять и обработать? Пользователь должен сообщить
программе, какой файл следует открыть. Этоможно сделатьс ледующим образом:

1 // Программа: Picture
2 #include <iostream>
3 #include <string>
4
5 int main()
6 {
7 std::cout << "Enter name of image-file to create a thumbnail for: ";
8 std::string filename;
9 std::cin >> filename;
10
11 // Открываем файл-изображение
12 // Создаем миниатюру
13 // Выводим миниатюру
14 }

Тем не менее, здесь есть потенциальная проблема. Каждый раз при запуске программа будет ожидать пользовательский ввод.
Это не проблема, если вы вручную запускаете программу из командной строки один раз для одного изображения. Но это уже
проблема, если выхотите работать с большим количеством файлов или чтобы другая программа имела возможность
запустить эту программу.

Рассмотрим это детально. Например, вы хотите создать миниатюры для всех файлов-изображений, которые находятся в
определенном каталоге. Как это сделать? Вы можете запускать эту программу столько раз, сколько есть изображений в
каталоге, введя каждое имя файла вручную. Однако, если есть сотни изображений, такой подход будет, мягко говоря, не очень
эффективным! Решением здесь будет написать программу, которая перебирала бы каждое имя файла в каталоге, вызывая
каждый раз функцию picture() для каждого файла.

Теперь рассмотрим случай, когда у васесть веб-сайт, и вы хотите,чтобы он создавал миниатюру каждый раз, когда
пользователь загружает изображение на сайт. Эта программа не может принимать входные данные из Интернета и следует
логический вопрос: «Как тогда вводить имя файла?». Выходом является вызов веб-сервером функции picture() автоматически
каждый раз после загрузки файла.

В обоих случаях нам нужно, чтобы внешняя программа передавала имя файла в качестве входных данных в нашу программу
при её запуске, вместо того, чтобы функция picture() сама дожидалась, пока пользователь вручную введет имя файла.
Аргументы командной строки — это необязательные строковые аргументы, передаваемые операционной системой в
программу при её запуске. Программа может их использовать в качестве входных данных, либо игнорировать. Подобно тому,
как параметры одной функции предоставляют данные для параметров другой функции, так и аргументы командной строки
предоставляют возможность людям или программам предоставлять входные данныедля программы.


Передача аргументов команднойстроки

Исполняемые программы могут запускаться в командной строке через вызов. Например, для запуска исполняемого файла
MyProgram , который находится в корневом каталоге диска C в Windows, вам нужно ввести:

C:\>MyProgram

Чтобы передать аргументы командной строки в MyProgram , вам нужно будет их просто перечислить после имени
исполняемого файла:

C:\>MyProgram SomeContent.txt

Теперь, при запуске MyProgram , SomeContent.txt будет предоставлен в качестве аргумента командной строки. Программа
может иметь несколько аргументов командной строки, разделенных пробелами:

C:\>MyProgram SomeContent.txt SomeOtherContent.txt

Это также работает и с Linux (хотя структура каталогов будет отличаться от структуры каталогов в Windows).
Если вы запускаете свою программу из среды IDE, то ваша IDE должна предоставить способ ввода аргументов командной
строки.
Для пользователей Visual Studio: Щелкните правой кнопкой мыши по нужному проекту в меню "Обозреватель решений" >
"Свойства":


См. картинку screen1.jpg в этой директории


Затем выберите "Свойства конфигурации" > "Отладка". На правой панели будетстрока "Аргументы команды" . Вы
сможете здесь ввести аргументы командной строки, и они будут автоматически переданы вашей программе при её запуске:


См. картинку screen2.jpg в этой директории


Пользователям Code::Blocks: Выберите "Project" > "Set program`s arguments...":


См. картинку screen2.jpg в этой директории



Использование аргументовкомандной строки

Теперь, когда вы знаете, как передавать аргументы команднойстроки в программу, следующим шагом будет доступ к ним из
программы. Для этого используется уже другая форма функции main(), которая принимает два аргумента ( argc и argv )
следующим образом:

1 int main(int argc, char *argv[])

Такжевы можете увидеть итакой вариант:

1 int main(int argc, char** argv)

Хоть оба эти варианта идентичны по своей сути, но рекомендуется использовать первый, так как он интуитивно понятнее.

argc (англ.«argumentcount» = «количество аргументов») — это целочисленный параметр, содержащий количество
аргументов, переданных впрограмму. argc всегда будет как минимум один, так как первым аргументом всегда является имя
самой программы. Каждый аргумент командной строки, который предоставляет пользователь, заставит argc увеличиться на
единицу.

argv (англ. «argument values» = «значения аргументов») — это место, где хранятся фактические значения аргументов. Хотя
объявление argv выглядитнемного пугающе, но это всего лишь массив строк C-style. Длиной этого массива является argc .
Давайте напишем короткую программу MyArguments, которая будет выводить значения всех аргументов командной строки:

1 // Программа MyArguments
2 #include <iostream>
3
4 int main(int argc, char *argv[])
5 {
6 std::cout << "There are " << argc << " arguments:\n";
7
8 // Перебираем каждый аргумент и выводим его порядковый номер и значение
9 for (int count=0; count < argc; ++count)
10 std::cout << count << " " << argv[count] << '\n';
11
12 return 0;
13 }

Теперь, привызове MyArguments с аргументами командной строки SomeContent.txt и 200, вывод будет следующим:

There are 3 arguments:
0 C:\MyArguments
1 SomeContent.txt
2 200

Нулевой параметр — это путь и имя текущей программы. Первый и второй параметры здесь являются аргументами командной
строки, которые мы передали.


Обработка числовых аргументов

Аргументы командной строки всегда передаются в качестве строк, даже если предоставленное значение является числовым.
Чтобы использовать аргумент команднойс троки в виде числа, вам нужно будет конвертировать его из строки в число. К
сожалению, в языке C++ это делается немного сложнее, чем должно быть:

1 #include <iostream>
2 #include <string>
3 #include <sstream> // для std::stringstream
4 #include <cstdlib> // для exit()
5
6 int main(int argc, char *argv[])
7 {
8 if (argc <= 1)
9 {
10 // В некоторых операционных системах argv[0] может быть просто пустой строкой, без имени программы
11
12 // Обрабатываем случай, когда argv[0] может быть пустым или не пустым
13 if (argv[0])
14 	std::cout << "Usage: " << argv[0] << " <number>" << '\n';
15 else
16 	std::cout << "Usage: <program name> <number>" << '\n';
17
18 exit(1);
19 }
20
21 std::stringstream convert(argv[1]); // создаем переменную stringstream с именем convert, инициализируя её значением argv[1]
22
23 int myint;
24 if (!(convert >> myint)) // выполняем конвертацию
25 	myint = 0; // если конвертация терпит неудачу, то присваиваем myint значение по умолчанию
26
27 	std::cout << "Got integer: " << myint << '\n';
28
29 return 0;
30 }

Если мы запустим эту программу с аргументом командной строки 843, то результатом будет:
Got integer: 843

std::stringstream работает почти так же, как и std::cin. Здесь мы инициализируем переменную std::stringstream значением
argv[1], так что мы можем использовать оператор >> дляизвлечения значения в переменную типа int.


Анализ аргументов командной строки

Когда выпишете что-то в командной строке (или запускаете свою программу из среды IDE), то операционная система
ответственна за то, чтобы ваш запрос проделал правильный путь. Это связано не только с запуском исполняемого файла, но и
с анализом любых аргументов для определения того, как их следует обрабатывать и передавать в программу.
Операционные системы имеют обязательные правила обработки специальных символов (двойные кавычки, бэкслешы и т.д.).
Например:

MyArguments Hello world!

Результат:
There are 3 arguments:
0 C:\MyArguments
1 Hello
2 world!

Строки, переданные в двойных кавычках, считают сячастью одной и тойже строки:

MyArguments "Hello world!"

Результат:
There are 2 arguments:
0 C:\MyArguments
1 Hello world!

Для того, чтобы вывести каждое слово на отдельной строке, используйте бэкслешы:
MyArguments \"Hello world!\"

Результат:
There are 3 arguments:
0 C:\MyArguments
1 "Hello
2 world!"


Заключение

Аргументы командной строки предоставляют отличный способ для пользователей или других программ передавать входные
данные в программу при её запуске. Используйте любые входные данные, необходимые программе при запуске, в качестве
аргументов командной строки. Если командная строка не передана, то вы всегда сможете это обнаружить и попросить
пользователя ввести данные вручную. Таким образом, ваша программа будет работать влюбом случае.
