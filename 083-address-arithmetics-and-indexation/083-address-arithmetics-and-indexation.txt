Урок No83. Адресная арифметика и индексация массивов


Язык C++ позволяет выполнять целочисленные операции сложения/вычитания с указателями. Если ptr указывает на целое
число, то ptr + 1 является адресом следующего целочисленного значения в памяти после ptr . ptr - 1 — это адрес
предыдущего целочисленногозначения (перед ptr ).

Оглавление:
1. Адресная арифметика
2. Расположение элементов массива в памяти
3. Индексация массивов
4. Использование указателя дляитерациипо массиву


Адресная арифметика

Обратите внимание, ptr + 1 не возвращает следующий любой адрес памяти, который находится сразу после ptr, но он возвращает 
адрес памяти следующего объекта, тип которого совпадает с типом значения, на которое указывает ptr. 
Если ptr указывает на адрес памяти целочисленного значения (размер которого 4 байта), то ptr + 3 будет возвращать адрес памяти 
третьего целочисленного значения после ptr. 
Если ptr указывает на адрес памяти значения типа char, то ptr + 3 будет возвращать адрес памяти третьего значения типа char после ptr.

При вычислении результата выражения адресной арифметики (или «арифметики с указателями») компилятор всегда умножает целочисленный 
операнд на размер объекта, на который указывает указатель. Например:

#include <iostream>
 
int main()
{
    int value = 8;
    int *ptr = &value;
 
    std::cout << ptr << '\n';
    std::cout << ptr+1 << '\n';
    std::cout << ptr+2 << '\n';
    std::cout << ptr+3 << '\n';
 
    return 0;
}

Результат на моем компьютере:
002CF9A4
002CF9A8
002CF9AC
002CF9B0

Как вы можете видеть, каждый последующий адрес увеличивается на 4. Это связано с тем, что размер типа int на моем компьютере составляет 4 байта.

Та же программа, но с использованием типа short вместо типа int:

#include <iostream>
 
int main()
{
    short value = 8;
    short *ptr = &value;
 
    std::cout << ptr << '\n';
    std::cout << ptr+1 << '\n';
    std::cout << ptr+2 << '\n';
    std::cout << ptr+3 << '\n';
 
    return 0;
}
Результат:

002BFA20
002BFA22
002BFA24
002BFA26

Поскольку тип short занимает 2 байта, то каждый следующий адрес больше предыдущего на 2.


Расположение элементов массива в памяти

Используя оператор адреса &, мы можем легко определить,что элементы массива расположены впамяти последовательно.
Тоесть, элементы 0, 1,2 и т.д. размещены рядом (друг за другом):

1 #include <iostream>
2
3 int main()
4 {
5 	int array[] = { 7, 8, 2, 4, 5 };
6
7 	std::cout << "Element 0 is at address: " << &array[0] << '\n';
8 	std::cout << "Element 1 is at address: " << &array[1] << '\n';
9 	std::cout << "Element 2 is at address: " << &array[2] << '\n';
10 	std::cout << "Element 3 is at address: " << &array[3] << '\n';
11
12 	return 0;
13 }

Результат на моем компьютере:
Element 0 is at address: 002CF6F4
Element 1 is at address: 002CF6F8
Element 2 is at address: 002CF6FC
Element 3 is at address: 002CF700

Обратите внимание, каждый из этих адресов по отдельности занимает 4 байта, как и размер типа int на моем компьютере.


Индексация массивов

Мы уже знаем, что элементы массива расположены в памяти последовательно. Из урока No 82 мы знаем, что фиксированный
массив может распадаться на указатель, который указывает на первый элемент (элемент под индексом 0) массива.
Также мы уже знаем, что добавление единицы к указателю возвращает адрес памяти следующего объекта этого же типа
данных.
Следовательно, можно предположить, что добавление единицы к идентификатору массива приведет к возврату адреса памяти
второго элемента (элемента под индексом 1) массива. Проверим на практике:

1 #include <iostream>
2
3 int main()
4 {
5 int array [5] = { 7, 8, 2, 4, 5 };
6
7 std::cout << &array[1] << '\n'; // выведется адрес памяти элемента под индексом 1
8 std::cout << array+1 << '\n'; // выведется адрес памяти указателя на массив + 1
9
10 std::cout << array[1] << '\n'; // выведется 8
11 std::cout << *(array+1) << '\n'; // выведется 8 (обратите внимание на скобки, они здесь обязательны)
12
13 return 0;
14 }

При разыменовании результата выражения адресной арифметики скобки необходимы для соблюдения приоритета
операций, поскольку оператор * имеет более высокий приоритет, чем оператор +.

Результат выполнения программы на моем компьютере:
001AFE74    
001AFE74
8
8

Оказывается, когда компилятор видит оператор индекса [], он, на самом деле, конвертирует его в указатель с операцией
сложения и разыменования! То есть, array[n] — это то же самое, что и *(array + n), где n является целочисленным
значением.Опе ратор индекса [] используется в целях удобства, чтобы не нужно было всегда помнить о скобках.


Использование указателя для итерации по массиву

Мы можем использовать указатели и адресную арифметику для выполнения итераций по массиву. Хотя обычно это не делается
(использование оператора индекса, как правило, читабельнее и менее подвержено ошибкам), следующий пример показывает,
что это возможно:

1 #include <iostream>
2
3 int main()
4 {
5 	const int arrayLength = 9;
6 	char name[arrayLength] = "Jonathan";
7 	int numVowels(0);
8 	for (char *ptr = name; ptr < name + arrayLength; ++ptr)
9 	{
10 		switch (*ptr)
11 		{
12 			case 'A':
13 			case 'a':
14 			case 'E':
15 			case 'e':
16 			case 'I':
17 			case 'i':
18 			case 'O':
19 			case 'o':
20 			case 'U':
21 			case 'u':
22 			++numVowels;
23 		}
24 	}
25
26 	std::cout << name << " has " << numVowels << " vowels.\n";
27
28 	return 0;
29 }

Как это работает? Программа использует указатель для прогона каждого элемента массива поочередно. Помните, что массив
распадается в указатель на первый элемент массива? Поэтому, присвоив name для ptr, сам ptr стал указывать на первый
элемент массива. Каждый элемент разыменовывается с помощью выражения switch, и, если текущий элемент массива
является гласной буквой, то numVowels увеличивается. Для перемещения указателя на следующий символ (элемент) массива в
цикле for используется оператор ++ . Работа цикла завершится, когда все символы будут проверены.

Результат выполнения программы:
Jonathan has 3 vowels.
