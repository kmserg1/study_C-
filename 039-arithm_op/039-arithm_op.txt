Урок No 39. Арифметические операторы

На этом урокемы рассмотрим арифметические операторы и их использованиев языке С++.

Оглавление:
1. Унарные арифметические операторы
2. Бинарные арифметические операторы
3. Деление целыхчисел и чисел типа с плавающей точкой
4. Использование оператора static_cast в операциях деления
5. Деление с остатком
6. Отрицательные числа в операциях деления до C++11
7. Арифметические операторы присваивания
8. Где оператор возведения в степень?
9. Тест

Унарные арифметические операторы

Унарные операторы — это операторы, которые применяются только к одному операнду.
Существуют два унарных арифметических оператора: плюс (+) и минус (−).
----------------------------------------------------------
Оператор	Символ	Пример	 Операция
----------------------------------------------------------
Унарный плюс 	+	 +x	 Значение x
Унарный минус 	−	 −x	 Отрицательное значение x
----------------------------------------------------------

Унарный оператор + возвращает значение операнда. Другими словами, +5=5 или +х=х. 
Унарный плюс вам, скорее всего, не придется использовать. Его по большей части добавили в 
качестве симметрии с унарным оператором минус.
Унарный оператор минус возвращает операнд, умноженныйна −1. Например, если х=5, то −х=−5.
Оба этих оператора пишутся непосредственно перед самим операндом, без пробела (−x,а не − x).
Не следует путать унарный оператор минус с бинарным оператором вычитания, хоть они и используют один и тот же символ.
Например, в выражении х = 5 − −3; первый минус — это оператор вычитания, а второй — унарный минус.

Бинарные арифметические операторы
Бинарные операторы — это операторы, которые применяются к двум операндам (слева и справа).
Существует 5 бинарных операторов.
------------------------------------------------------------
Оператор	 Символ	 Пример	 Операция
------------------------------------------------------------
Сложение	 +	 x+y	 x плюс y
Вычитание	 −	 x−y	 x минус y
Умножение	 *	 x*y	 x умножить на y
Деление 	 /	 x/y	 x разделить на y
Делениес остатком %	 x%y	 Остаток от деления x на y
------------------------------------------------------------
Операторы сложения, вычитания и умножения работают также, как и в обычной математике. А вот деление и деление с
остатком рассмотрим детально.


Деление целых чисел и чисел типа с плавающей точкой

Оператор деления имеет два режима. Если оба операнда являются целыми числами, то оператор выполняет целочисленное
деление. Т.е. любая дробь (больше/меньше) отбрасывается и возвращается целое значение без остатка, например, 7/4=1.
Если один или оба операнда типа с плавающей точкой, то тогда будет выполняться деление типа с плавающей точкой. Здесь
уже дробь присутствует. Например, выражения 7.0/3= 2.333, 7/3.0=2.333 или 7.0/3.0 = 2.333 имеют один и тот же результат.
Попытки деления на 0 (или на 0.0) станут причиной сбоя в вашей программе, и это правило не следует забывать!


Использование оператора static_cast в операциях деления

На уроке о символьном типе данных char мы уже использовали оператор static_cast для вывода ASCII-символов 
в виде целых чисел.
Аналогичным образом мы можем использовать static_cast для конвертации целого числа в число типа с плавающей точкой.
Таким образом, вместо целочисленного деления выполнится деление типа с плавающей точкой. Например:

1 #include <iostream>
2
3 int main()
4 {
5 int x= 7;
6 int y= 4;
8 std::cout << "int / int=" <<x / y<< "\n";
7
10 std::cout << "int / double="<<x/ static_cast<double>(y)<<"\n";
9  std::cout << "double/ int="<<static_cast<double>(x) /y<<"\n";
11 std::cout << "double/ double ="<<static_cast<double>(x) / static_cast<double>(y) <<"\n";
12
13 return 0;
14 }

Результат выполнения программы:
int/int=1
int/double =1.75
double / int =1.75
double / double = 1.75

Деление с остатком

Оператор деления с остатком (%) работает только с целочисленными операндами и возвращает остаток от 
целочисленного деления. Например:
 Пример No 1: 7 / 4 = 1 с остатком 3,таким образом, 7%4=3.
 Пример N o2: 25/7=3 с остатком 4, таким образом, 25%7=4. Остаток составляет не дробь, а целое число.
 Пример No 3: 36%5=1 с остатком 1. В числе 36 только 35 делитсяна 5 без остатка, поэтому 36−35 = 1,
1—это остаток и результат.

Данный оператор чаще всего используют для проверки деления без остатка одних чисел на другие. Если х%у==0,
то х делится на у без остатка.
Например, мы хотим написать программу, которая выводит числа от 1 до 100 по 20 значений в каждой строке.
Мы можем использовать оператор деления с остатком для создания разрыва строк.
Несмотря на то, что мы еще не рассматривали цикл while, в следующей программе всё максимально просто и понятно:

1 #include <iostream>
2
3 int main()
4 {
5 // Переменная count хранит текущее число для вывода
6 int count = 1; // начинаем с 1
7
8 // Повторение операции (цикл) до тех пор, пока count не будет равен 100
9 while(count <= 100)
10 	{
12
11 	std::cout<<count <<" ";//вывод текущегочисла
13 	// Если count делится на 20 без остатка, то вставляем разрыв строки и продолжаем с новой строки
14 	if(count%20==0)
15 		std::cout <<"\n";
16
17 	count = count + 1; //переходим к следующему числу
18 	} // конец while
19
20 return 0;
21 } //конец main()

Результат выполнения программы:
1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40
41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60
61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80
81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100

О while мы еще поговорим на соответствующем уроке.


Отрицательные числа в операциях деления до C++11

До C++11, если любой из операндов целочисленного деления является отрицательным, то компилятор округляет результат
самостоятельно! Например, результатом −5 / 2 может быть либо −3, либо −2. Однако большинство современных
компиляторо вокругляют числа в сторону нуля (например,в −5 / 2 результатом будет −2). В спецификации C++11
определили, что компилятор должен всегда округлять к нулю (или, проще говоря, просто отбрасывать дробь).
Также до C++11, если один из операндов оператора деления с остатком является отрицательным, то результат может быть как
положительным, так и отрицательным! Например, результатом −5%2 может быть как 1, так и −1. В спецификации C++11
решили сделать так, чтобы результат a % b был того же знака, что и значение а.

Арифметические операторы присваивания
---------------------------------------------------------------------------------------------
Оператор			Символ	 Пример		Операция
---------------------------------------------------------------------------------------------
Присваивание	 	 	=	 x= y		Присваиваем значение y переменной x
Сложение сприсваиванием  	+=	 x +=y  	Добавляем y к x
Вычитаниес присваиванием 	−=	 x −=y		Вычитаем y из x
Умножение с присваиванием       *=	 x *=y		Умножаем x на y
Деление с присваиванием		/=	 x/=y		Делим x на y
Деление с остатком и с		%=	 x %=y		Присваиваем остаток от деления x на y
присваиванием						переменной x
---------------------------------------------------------------------------------------------

До этог омомента, когда нам нужно было добавить число 5 к определенной переменной, мы делали следующее:
1 x = x + 5;
Это работает, но требуется два оператора для выполнения.
Так как стейтменты типа х = х + 5 являются очень распространенными, то C++ предоставляет 5 арифметических операторов
присваивания длянашего удобства. Вместо х = х + 5, мы можем записать:
1 x+= 5;
Вместо:
1 x=x*y;
Мы можем записать:
1 x*= y;


Где оператор возведения в степень?
В языке C++ вместо оператора возведения в степеньесть функция pow(), которая находится в заголовочном
файле cmath.
pow(base,exponent) эквивалентно base^exponent.

Стоит отметить, что параметры pow() имеют тип double, поэтому вы
можете использовать не только целые числа, но и дробные. Например:

1 #include <iostream>
2 #include <cmath> //подключаем pow()
3
4 int main()
5 {
6 std::cout << "Enter the base: ";
7 double base;
8 std::cin >> base;
9
10 std::cout << "Enter the exponent:";
11 double exp;
12 std::cin >> exp;
13
14 std::cout << base <<"^" << exp<< "="<<pow(base,exp)<< "\n";
15
16 return 0;
17 }

Тест
Задание No 1
Вычислите результат следующего выражения: 6 + 5 * 4 % 3.
8
Ответ No 1
      
Задание No 2
Напишите программу, которая проситпользователя ввести целое число, а затем сообщает, является ли его число чётным или
нечётным. Напишите функцию isEven(), которая возвращает true, если целое число является чётным. Используйте оператор
деления с остатком, чтобы определить чётность числа.
Подсказка: Используйте ветвление if и оператор сравнения (==).

#include <iostream>

bool isEven(int i){
if(i%2==0) 
	return true;
return false;
}

int main(){
std::cout << "Введите целое число: ";
int i;
std::cin >> i;
if(isEven(i))
	std::cout << "Число " << i << "является четным\n";
}

Ответ No 2
