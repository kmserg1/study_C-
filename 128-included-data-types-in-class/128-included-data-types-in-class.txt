Урок No 128. Вложенные типы данных в классах

Рассмотрим следующий код:

1 #include <iostream>
2
3 enum FruitList
4 {
5 	AVOCADO,
6 	BLACKBERRY,
7 	LEMON
8 };
9
10 class Fruit
11 {
12 private:
13 	FruitList m_type;
14
15 public:
16
17
18 	Fruit(FruitList type) :
19 		m_type(type)
20 	{
21 	}
22
23 	FruitList getType() { return m_type; }
24 };
25
26 int main()
27 {
28 	Fruit avocado(AVOCADO);
29
30 	if (avocado.getType() == AVOCADO)
31 		std::cout << "I am an avocado!";
32 	else
33 		std::cout << "I am not an avocado!";
34
35 return 0;
36 }

В этой программе всё работает. Но поскольку перечисление FruitList используется в связке с классом Fruit, то немного
странно, что оно существует отдельно от самого класса.


Вложенные пользовательские типы данных в классах

В отличие от функций, которые не могут быть вложены (находится внутри друг друга), в языке C++ пользовательские типы
данных могут быть определены (вложены) внутри класса. Для этого нужно просто определить пользовательский тип внутри
класса под соответствующим спецификатором доступа.

Вот вышеприведенная программа, но уже с FruitList, определенным внутри класса:

1 #include <iostream>
2
3 class Fruit
4 {
5 public:
6 	// Мы переместили FruitList внутрь класса под спецификатор доступа public
7 	enum FruitList
8 	{
9 		AVOCADO,
10 		BLACKBERRY,
11 		LEMON
12 	};
13
14 private:
15 	FruitList m_type;
16
17 public:
18
19
20 	Fruit(FruitList type) :
21 		m_type(type)
22 	{
23 	}
24
25 	FruitList getType() { return m_type; }
26 };
27
28 int main()
29 {
30 	// Доступ к FruitList осуществляется через Fruit
31 	Fruit avocado(Fruit::AVOCADO);
32
33 	if (avocado.getType() == Fruit::AVOCADO)
34 		std::cout << "I am an avocado!";
35 	else
36 		std::cout << "I am not an avocado!";
37
38 	return 0;
39 }

Обратите внимание:

 Во-первых, FruitList теперь определен внутри тела класса.

 Во-вторых, мы определили его под спецификатором доступа public, т.е. сделали доступ к FruitList открытым.

По сути, классы работают как пространства имен для любых вложенных типов. В первом примере мы имеем доступ к
перечислителю AVOCADO напрямую, так как AVOCADO определен в глобальной области видимости (мы могли бы
предотвратить это, используя класс enum вместо обычного enum, и тогда доступ к AVOCADO осуществлялся бы через
FruitList::AVOCADO ). Теперь, поскольку FruitList считается частью класса, доступ к перечислителю AVOCADO осуществляется
через имя класса, например: Fruit::AVOCADO.

Обратите внимание, поскольку классы enum также работают как пространства имен, и если бы мы поместили класс enum
(вместо обычного enum) с именем FruitList внутрь класса Fruit, то доступ к перечислителю AVOCADO осуществлялся бы через
Fruit::FruitList::AVOCADO.


Другие вложенные пользовательские типы данных в классах

Хотя перечисления являются наиболее распространенным вложенным пользовательским типом данных внутри классов, язык
C++ также позволяет определять и другие пользовательские типы внутри классов, такие как псевдонимы типов (typedef и type
alias) и даже другие классы!
Как и любой обычный член класса, вложенный класс будет иметь доступ ко всем членам класса-оболочки (в котором он
размещен). Однако вложенные классы не имеют доступа к указателю *this класса-оболочки.

Определение вложенных типов не очень распространено, но Стандартная библиотека C++ все же использует это в некоторых
случаях. Об этом детально мы поговорим на соответствующем уроке.