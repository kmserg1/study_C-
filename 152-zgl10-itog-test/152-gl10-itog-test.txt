Глава No10. Итоговый тест


В этой главе мы рассмотрели типы отношений между двумя объектами в языке C++.

Оглавление:
1. Теория
2. Задание No1
3. Задание No2


Теория

Процесс построения сложных объектов из более простых называется композицией объекта. Существует два подтипа
композиции объектов: композиция и агрегация.

В композиции типом отношений между членом и классом является «часть чего-то» (член является «частью» класса). В
композиции класс управляет существованием членов. Для реализации композиции части и объект должны соответствовать
следующим правилам:

 Часть (член) является частью объекта (класса).
 Часть (член) может принадлежать только одному объекту (классу) в моменте.
 Существование части (члена) управляется объектом (классом).
 Часть (член) не знает о существовании объекта (класса).

Реализация композиции обычно происходит через переменные-члены или через указатели, когда класс управляет памятью
самостоятельно (выделение/освобождение). Если вы можете реализовать композицию в своем классе, то вы должны
реализовать композицию в своем классе.

В агрегации типом отношений между членом и классом является «имеет» (класс «имеет» члены). В отношениях агрегации
класс не управляет существованием членов. Для реализации агрегации части и объект должны соответствовать
следующим правилам:

 Часть (член) является частью объекта (класса).
 Часть (член) может принадлежать более чем одному объекту (классу) в моменте.
 Существование части (члена) не управляется объектом (классом).
 Часть (член) не знает о существовании объекта (класса).
Агрегации обычно реализуются с помощью указателей или ссылок.

В ассоциации объекты не связаны между собой, нет отношений типа «части-целое». Для реализации ассоциации объекты
должны соответствовать следующим правилам:
 Первый объект (член) не связан со вторым объектом (классом).
 Первый объект (член) может принадлежать сразу нескольким объектам (классам) одновременно.
 Существование первого объекта (члена) не управляется вторым объектом (классом).
 Первый объект (член) может знать или не знать о существовании второго объекта (класса).
Ассоциации могут быть реализованы как через указатели, так и через ссылки.

В зависимости один класс использует второй класс для выполнения определенного задания. Используемый класс обычно
не является членом главного класса, а временно создается, используется, а затем уничтожается или передается в метод
главного класса извне.

Контейнерные классы — это классы, предназначенные для хранения и организации нескольких объектов определенного
типа данных. 
Контейнер-значение — это композиция, в которой хранятся копии объектов контейнера. 
Контейнер-ссылка — это агрегация, в которой хранятся указатели или ссылки на объекты, которые находятся вне тела контейнера.

Список инициализации std::initializer_list может использоваться для реализации конструкторов, перегрузки оператора
присваивания и других функций, которые принимают список инициализации в качестве параметра. 
std::initailizer_list находится в заголовочном файле initializer_list.

-------------------------------------------------------------------------------------------------------------------------------
Свойства		Композиция		Агрегация		Ассоциация		Зависимость
-------------------------------------------------------------------------------------------------------------------------------
Отношения		«Части-Целое»		«Части-Целое»		Объекты не связаны 	Объекты не связаны между собой
									между собой
Члены могут 
принадлежать  
нескольким классам?	Нет			Да			Да			Да

Класс управляет 	Да			Нет			Нет			Да
существованием членов?

Вид отношений		Однонаправленные	Однонаправленные	Однонаправленные	Однонаправленные
									/Двунаправленные	
Тип отношений		«Часть чего-то»		«Имеет»			«Использует»		«Зависит от»
-------------------------------------------------------------------------------------------------------------------------------

Тест
Эта глава проще и более абстрактная, чем предыдущие главы, поэтому этот тест будет лаконичным.

Задание No 1
Какие типы отношений (композиция, агрегация, ассоциация или зависимость) описываются ниже?
a) Класс Животное, который содержит Тип Животного и его Имя. - Композиция

Ответ No1.a) 
Композиция. Тип Животного и его Имя не используются вне класса Животное.

b) Класс TextEditor с методом Save(), который принимает объект file . Метод Save() записывает содержимое редактора на
диск. - Агрегация

Ответ No1.b) 
Зависимость. Класс TextEditor использует объект file для выполнения определенного задания — сохранения объекта на диск.

c) Класс Авантюрист, который может хранить разные Предметы: мечи, копья, зелья или книги заклинаний. Эти Предметы
могут быть отброшены и подняты другими Авантюристами. - Агрегация

Ответ No1.c) 
Агрегация. Когда Предметы связаны с Авантюристом, то Авантюрист «имеет» эти предметы. Меч, используемый Авантюристом, не 
может одновременно быть использован другим Авантюристом. Но Авантюрист не управляет существованием самих Предметов.

d) Программист использует Компьютер для просмотра видео с котами в Интернете. - Ассоциация

Ответ No1.d)
Ассоциация. Программист и Компьютер не связаны между собой, за исключением случаев, когда Программист использует Компьютер 
для просмотра видео с котами.


e) Класс Компьютер, который содержит класс Процессор. Процессор можно вынуть из Компьютера и посмотреть.- Агрегация

Ответ No1.e)
Агрегация. Компьютер имеет Процессор, но не управляет его существованием.


Задание No2
Если вы можете создать класс, используя композицию, агрегацию, ассоциацию или зависимость, то что вы выберите?

Композицию

Ответ No2
Композиция