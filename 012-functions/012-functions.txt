Урок No12. Функции

Вы ужезнаете, что каждая программа должна содержать функцию main() (с которой она и начинает свое выполнение). 
Тем не менее, большинство программ используюти много других функций.

Оглавление:
1.Функции
2.Возвращаемые значения
3.Типвозвратаvoid
4.Возвратзначенийфункцией main()
5.Ещеовозвращаемыхзначениях
6.Повторноеиспользованиефункций
7.Вложенные функции
8.Тест
9.Ответы


Функции

Функция — это последовательность стейтментов для выполнения определенного задания. Часто ваши программы будут
прерывать выполнение одних функций ради выполнения других. Вы делаете аналогичные вещи в реальной жизни
постоянно. Например, вычитаете книгу и вспомнили, что должны были сделать телефонный звонок. Вы оставляете
закладку в своей книге, берете телефон и набираете номер. После того, как выуже поговорили, вы возвращаетесь к
чтению: к той странице, на которой остановились.
Программына языке C++ работают похожим образом. Иногда, когда программа выполняет код, она может столкнуться с
вызовом функции. Вызов функции — это выражение, которое указывает процессору прервать выполнение текущей
функции и приступить к выполнению другой функции. Процессор «оставляетзакладку» в текущейточке выполнения, а
затем выполняет вызываемую функцию. Когда выполнение вызываемой функции завершено, процессор возвращается к
закладке и возобновляет выполнение прерванной функции.
Функция, в которой находится вызов, называется caller, а функция, которую вызывают — вызываемая функция,
например:

1 #include <iostream>// для std::cout и std::endl
2
3 // Объявление функции doPrint(), которую мы будем вызыват
4 void doPrint() {
5 std::cout <<"In doPrint()" <<std::endl;
6 }
7
8 // Объявление функции main()
9 int main()
10 {
11 std::cout << "Starting main()" << std::endl;
12 doPrint(); // прерываем выполнение функции main() вызовом функции doPrint(). Функция main() в данном случае является caller-ом
13 std::cout << "Ending main()" << std::endl;
14 return 0;
15 }


Результат выполнения программы:
Starting main()
In doPrint()
Ending main()

Эта программа начинает выполнение с первой строки функции main(), где выводится на экран следующая строка: 
Starting main(). Вторая строка функции main() вызывает функцию doPrint(). На этом этапе выполнение стейтментов в функции
main() приостанавливается и процессор переходит к выполнению стейтментов внутри функции doPrint(). Первая (и
единственная) строка в doPrint() выводит текст In doPrint(). Когда процессор завершает выполнение doPrint(), он
возвращается обратно в main() к той точке, на которой остановился. Следовательно, следующим стейтментом является
вывод строки Ending main().
Обратите внимание, для вызова функции нужно указать её имя и список параметров в круглых скобках(). В примере,
приведенном выше, параметры не используются, поэтому круглые скобки пусты.  Мы детально поговорим о параметрах
функций на следующем уроке.

Правило: Не забывайте указывать круглые скобки () при вызове функций.

Возвращаемые значения

Когда функция main() завершает свое выполнение, она возвращает целочисленное значение обратно в операционную
систему, используя оператор return.
Функции, которые мы пишем, также могут возвращать значения. Для этого нужно указать тип возвращаемого значения
(или «тип возврата»). Он указывается при объявлении функции, перед её именем. Обратите внимание, тип возврата не
указывает, какое именно значение будет возвращаться. Он указывает только тип этого значения.
Затем, внутри вызываемой функции, мы используем оператор return, чтобы указать возвращаемое значение — какое
именно значение будет возвращаться обратно в caller.
Рассмотрим простую функцию, которая возвращает целочисленное значение:

1 #include <iostream>
2
3 // int означает, что функция возвращает целочисленное значение обратно в caller
4 int return7()
5 {
6   // Эта функция возвращает целочисленное значение, поэтомумы должны использовать оператор return
7 return 7; // возвращаем число 7 обратно в caller
8 }
9
10 int main()
11 {
12 std::cout<< return7() <<std::endl; //выведется 7 
13 std::cout<< return7() + 3 <<std::endl; //выведется 10
14
15 return7(); //возвращаемое значение7 игнорируется, так как функция main() ничего с ним не делает
16
17 return 0;
18 }

Результат выполнения программы:
7
10
Разберемся детально:
 Первый вызов функции return7() возвращает 7 обратно в caller, которое затем передается в std::cout длявывода.
 Второй вызов функции return7() опять возвращает 7 обратно в caller. Выражение 7 + 3 имеет результат 10, который затем выводится на экран.
 Третий вызов функции return7() опять возвращает7 обратно в caller. Однако функция main() ничего с ним не делает, поэтому ничего 
  и не происходит (возвращаемое значение игнорируется)

Примечание: Возвращаемые значения не выводятся на экран, если их не передать объекту std::cout. В последнем
вызове функции return7() значение не отправляется в std::cout, поэтому ничего и не происходит.


Тип возврата void

Функции могути не возвращать значения. Чтобы сообщить компилятору, что функция не возвращает значение, нужно
использовать тип возврата void. Взглянем еще раз на функцию doPrint() из выше приведенного примера:

1 voiddoPrint() // void-это тип возврата
2 {
4 // Эта функция не возвращает никакого значения, поэтому оператор return здесь не нужен
3 std::cout <<"IndoPrint()" <<std::endl;
5 }

Эта функция имеет тип возврата void, который означает, что функция не возвращает значения. Поскольку значениене
возвращается, то и оператор return нетребуется.

Вот еще один пример использования функции типа void:

1 #include <iostream>
2
3 // void означает, что функция не возвращает значения
4 void returnNothing()
5 {
6 std::cout<< "Hi!" <<std::endl;
7 // Эта функция не возвращает никакого значения, поэтому оператор return здесь не нужен
8 }
9
10 int main()
11 {
12 returnNothing(); //функция returnNothing() вызывается, но обратно в main() ничего невозвращает
13
14 std::cout<< returnNothing(); // ошибка, эта строчка не скомпилируется. Вам нужнобудет её закомментировать
15 return 0;
16 }

В первом вызове функции returnNothing() выводится Hi!, но ничего не возвращается обратно в caller. Точка выполнения
возвращается обратно в функцию main(), где программа продолжает свое выполнение.
Второй вызов функции returnNothing() даже не скомпилируется. Функция returnNothing() имеет тип возврата void, который
означает, что эта функция не возвращает значения. Однако функция main() пытается отправить это значение (которое не
возвращается) в std::cout для вывода. std::cout не может обработать этотслучай, так как значения на вывод не
предоставлено. Следовательно, компилятор выдаст ошибку. Вам нужно будет закомментировать эту строку, чтобы
компиляцияпрошла успешно.


Возврат значений функцией main()

Теперь у вас есть понимание того, как работает функция main(). Когда программа выполняется, операционная система
делает вызов функции main() и начинается её выполнение. Стейтменты в main() выполняются последовательно. В конце
функция main() возвращает целочисленное значение (обычно 0) обратно в операционную систему. Поэтому main()
объявляется как int main().
Почему нужно возвращать значения обратно в операционную систему? Дело в том, что возвращаемое значение функции
main() является кодом состояния, который сообщает операционной системе об успешном или неудачном выполнении
программы. Обычно, возвращаемое значение 0 (ноль) означает что всё прошло успешно, тогда как любое другое
значение означает неудачу/ошибку.
Обратите внимание, по стандартам языка C++ функция main() должна возвращать целочисленное значение. Однако, если
вы не укажете return в конце функции main(), компилятор возвратит 0 автоматически, если никаких ошибок не будет. Но
рекомендуется указывать return в конце функции main() и использовать тип возврата int для функции main().


Еще о возвращаемых значениях

Во-первых, если тип возврата функции не void, то она должна возвращать значение указанного типа (использовать
оператор return). Единственное исключение — функция main(), которая возвращает 0, если не предоставлено другое
значение.
Во-вторых, когда процессор встречает в функции оператор return, он немедленно выполняет возврат значения обратно в
caller и точка выполнения также переходит в caller. Любой код, который находится за оператором return в функции —
игнорируется.
Функция может возвращать только одно значение через return обратно в caller. Это может быть либо число (например, 7),
либо значение переменной, либо выражение (у которого есть результат), либо определенное значение из набора
возможных значений.
Но есть способы обойти правило возврата одного значения, возвращая сразу несколько значений, но об этом детально мы
поговорим на соответствующем уроке.
Наконец, автор функции решает, что означает её возвращаемое значение. Некоторые функции используют возвращаемые
значения в качестве кодов состояния для указания результата выполнения функции (успешно ли выполнение или нет).
Другие функции возвращаю топределенное значение из набора возможных значений. Кроме того, существуют функции,
которые вообще ничего не возвращают.


Повторное использование функций

Одну и ту же функцию можно вызывать несколько раз, даже в разных программах,что очень полезно:

1 #include <iostream>
2
3 // Функция getValueFromUser() получает значение от пользователя, а затем возвращает его обратно в caller
4 int getValueFromUser()
5 {
6 std::cout <<"Enter an integer: ";
7 int x;
8 std::cin>> x;
9 return x;
10 }
11
12 int main()
13 {
14  int a = getValueFromUser(); //первый вызов функции getValueFromUser()
15  int b = getValueFromUser(); //второй вызов функции getValueFromUser()
16
17  std::cout <<a<< " + " <<b<< " = " <<a+b<< std::endl;
19  return 0;
18
20 }

Результат выполнения программы:
Enter an integer: 4
Enter an integer: 9
4+ 9 = 13

Здесь main() прерывается 2 раза. Обратите внимание, в обоих случаях, полученное пользовательское значение
сохраняется в переменной x, а затем передается обратно в main() с помощью return, где присваивается переменной a
или b!
Также main() не является единственной функцией, которая может вызывать другие функции. Любая функция может
вызывать любую другую функцию!

1 #include <iostream>
2
3 void printO()
4 {
5 std::cout <<"O"<< std::endl;
6 }
7
8 void printK()
9 {
10 std::cout <<"K"<< std::endl;
11 }
12
13 // Функция printOK() вызывает как printO(), так и printK()
14 void printOK()
15 {
16 printO();
17 printK();
18 }
19
20 // Объявление main()
21 int main()
22 {
23 std::cout <<"Starting main()"<< std::endl;
24 printOK();
25 std::cout <<"Ending main()"<< std::endl;
26 return 0;
27 }

Результат выполнения программы:
Starting main()
O
K
Ending main()


Вложенные функции

В языке С++ одни функции не могут быть объявлены внутри других функций (т.е.быть вложенными). Следующий код
вызовет ошибку компиляции:
1 #include <iostream>
2
3 int main()
4 {
5 int boo() // эта функция находится внутри функции main(), что запрещенo
6 {
7 std::cout<< "boo!";
8 return 0;
9 }
10
11
 boo();
12 return 0;
13 }

Правильно вот так:

1 #include <iostream>
2
3 int boo() // теперь уже не в main()
4 {
5 std::cout <<"boo!";
6 return 0;
7 }
8
9 int main()
10 {
11 boo();
12 return 0;
13 }


Тест

Какие из следующих программ не скомпилируются (и почему), а какие скомпилируются (и какой у них результат)?

Программа No 1:
1 #include <iostream>
2
3 int return5()
4 {
5 return 5;
6 }
7
8 int return8()
9 {
10 return 8;
11 }
12
13 int main()
14 {
15 std::cout<< return5() + return8() <<std::endl;
16
17 return 0;
18 }

Программа No 2:
1  #include <iostream>
2 
3 int return5()
4 {
5 return 5;
6
7  intreturn8()
8   {
9   return 8;
10  }
11 }
12
13 int main()
14 {
15  std::cout<< return5() + return8() <<std::endl;
16
17 return 0;
18 }

Программа No 3:
1 #include <iostream>
2
3 int return5()
4 {
5 return 5;
6 }
7
8 int return8()
9 {
10 return 8;
11 }
12
13 int main()
14 {
15 return5();
16 return8();
17
18 return 0;
19 }

Программа No 4:
1 #include <iostream>
2
3 void printO()
4 {
5 std::cout<< "O" <<std::endl;
6 }
7
8 int main()
9 {
10 std::cout<< printO()<< std::endl;
11
12 return 0;
13 }

Программа No 5:
1 #include <iostream>
2
3 int getNumbers()
4 {
6 return 8;
5 return 6;
7 }
8
9 int main()
10 {
11 std::cout<< getNumbers()<< std::endl;
13
12 std::cout<< getNumbers()<< std::endl;
14 return 0;
15 }

Программа No 6:
1  #include <iostream>
2
3  int return 6()
4 {
5 return 6;
6 }
7
8 int main()
9 {
10  std::cout<< return6()<< std::endl;
11
12  return 0;
13 }

Программа No 7:
1  #include <iostream>
2
3  int return6()
4 {
5 return 6;
6 }
7
8 int main()
9 {
10 std::cout<< return6 <<std::endl;
11
12 return 0;
13 }

Ответы

Ответ No 1
Скомпилируется,  результат 13

ОтветNo2
Не скомпилируется, т.к. вложенная функция

Ответ No 3
Скомпилируется,  результат пустой, т.к. нет вывода на экран

Ответ No 4
Не скомпилируется, т.к. мы пытаемся вывести на экран значение ф-ии типа void

Ответ No 5
Скомпилируется,  результат 
6
6

Ответ No 6
Не скомпилируется, т.к. в итмени ф-ии  пробел

Ответ No 7
Скомпилируется,  результат - адрес памяти ф-ии return6.
